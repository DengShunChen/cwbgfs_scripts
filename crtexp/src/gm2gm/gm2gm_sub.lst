
 Fujitsu Fortran Version 2.0.0  Mon Jul 24 10:21:56 2017

 Compilation information
   Current directory : /IFS4/data/datagfs/xb80/exp/GFS_Scripts_Maintain/crtexp/src/gm2gm
   Source file       : gm2gm_sub.f90

 Option information
   Command line options : -Kfast,openmp,optmsg=2 -CcdRR8 -X9 -Fwide -V -Ec -Qa,d,i,p,t,x -c -L/package/fx100/dms/dms.v4/lib -lrdms -lgdbm -L/package/fx100/operlib/lib -lnwp
   Effective options    : -fi -g0 -AE -Ec -Free -Fwide -O3 -Qa,d,i,p,t,x -X9
                          -CcdRR8 -x0
                          -KHPC_ACE2 -KFLTLD -Kadr44 -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofed
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc -Kintentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Knolto -Knonf -Kns -Kmfunc=1
                          -Knoocl -Komitfp -Koptmsg=2 -Knopreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_nostrong -Kprefetch_strong_L2
                          -Knoshortloop -Ksimd=auto -Ksimd_noseparate_stride
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Kthreadsafe -Knoparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration
                          -Knoreduction -Knoregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocoarray
                          -Nnocompdisp -Nnocopyarg -Nfreealloc -Nf90move
                          -Nnohook_func -Nnohook_time -Nline -Nlst -Nlst=a
                          -Nlst=d -Nlst=i -Nlst=p -Nlst=t -Nlst=x
                          -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "xyintpo"
  (inc)(line-no.)(nest)(optimize)
               1                         subroutine xyintpo(flag0,im,jm,flag,nx,my,ain,aout,iwnd,xr,yr,first)
               2                         implicit none
               3                     !
               4                     !   process the interpolation from gg(or ga, gx) to gg(or ga)
               5                     !   gg : the gaussion grid system
               6                     !   ga : the equal distant grid system
               7                     !   gx : the equal distant grid system, but the first point at half
               8                     !        a grid's distance
               9                     !
              10                         integer :: i,j,ix,jy,im,jm,nx,my
              11                         real    :: ain(im,jm),aout(nx,my),xr(nx),yr(my)
              12                         character*2 flag0, flag
              13                         integer iwnd
              14                         logical first
              15                     !
              16                     !  working arrays
              17                     !
              18                         real ::  weight0(jm),sinl0(jm),weight(my),sinl(my) &
              19                                 ,alat0(jm+2),alon0(im+1),alat(my),alon(nx)
              20                         real :: aaa(im+1,jm+2),bbb(nx*my),wkx(nx*my),wky(nx*my)
              21                         integer jend, mn, nxmy
              22                         real :: pi, xx, yy, ps, pn
              23                     !
              24                         pi= 4.0*atan(1.0)
              25                     
              26                     !-------------------------
              27     1                   if( first ) then
              28     1               !
              29     1               !  gaussian quadrature weights and latitudes
              30     1               !----
              31     2                     if( flag0.eq.'gg' .or. flag0.eq.'GG' )then       !--- gg
              32     2               !
              33     2                     call gausl3 (jm,-1.,1.,weight0,sinl0)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    MULTI-OPERATION FUNCTION
                                   <<< Loop-information  End >>>
              34     3       8v            do j = 1, jm
              35     3       8v             alat0(j+1) = asin(sinl0(j))
              36     3       8v            end do
              37     2                     alat0(1)    = -pi*0.5
              38     2                     alat0(jm+2) = pi*0.5
              39     2                     jend = jm+1
              40     2               !
              41     2                     elseif( flag0.eq.'ga' .or. flag0.eq.'GA' )then   !--- ga
              42     2               !
              43     2                     yy= pi/float(jm-1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              44     3       8v            do j = 1, jm
              45     3       8v             alat0(j) = -0.5*pi+(j-1)*yy
              46     3       8v            end do
              47     2                     jend = jm-1
              48     2               !
              49     2               !  gx : equal distance, but the first point beginning at half delta
              50     2               !
              51     2                     elseif( flag0.eq.'gx' .or. flag0.eq.'GX' )then   !--- gx
              52     2                     yy= pi/float(jm)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              53     3       8v            do j = 1, jm
              54     3       8v             alat0(j+1) = -0.5*pi+0.5*yy+(j-1)*yy
              55     3       8v            end do
              56     2                     alat0(1)    = -pi*0.5
              57     2                     alat0(jm+2) = pi*0.5
              58     2                     jend = jm+1
              59     2               !
              60     2                     else
              61     2               !
              62     2                     print*, flag0,' No such grid system --- error '
              63     2                     stop
              64     2               !
              65     2                     end if
              66     1               !
              67     1                     xx= (2.0*pi)/float(im)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              68     2       8v            do i = 1, im
              69     2       8v             alon0(i) = (i-1)*xx
              70     2       8v            end do
              71     1                     alon0(im+1) = pi*2.0
              72     1               !----
              73     2                     if( flag.eq.'gg' .or. flag.eq.'GG' )then
              74     2               !
              75     2                     call gausl3 (my,-1.,1.,weight,sinl)
              76     2               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    MULTI-OPERATION FUNCTION
                                   <<< Loop-information  End >>>
              77     3       8v            do j = 1, my
              78     3       8v             alat(j) = asin(sinl(j))
              79     3       8v            end do
              80     2               !
              81     2                     elseif( flag.eq.'ga' .or. flag.eq.'GA' )then   !--- else
              82     2               !
              83     2                     yy= pi/float(my-1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              84     3       8v            do j = 2, my-1
              85     3       8v             alat(j) = -0.5*pi+(j-1)*yy
              86     3       8v            end do
              87     2                      alat(1)  = -0.5*pi+0.0001
              88     2                      alat(my) =  0.5*pi-0.0001
              89     2               !
              90     2                     else
              91     2               !
              92     2                     print*, flag,' No such grid system for outfields'
              93     2                     stop
              94     2               !
              95     2                     end if
              96     1               !
              97     2                     if( flag0.eq.'gx' .or. flag0.eq.'GX' )then
              98     2               !
              99     2               !  shift alon with half grid's distance
             100     2               !
             101     2                     xx= (2.0*pi)/float(nx)
             102     2                     alon(1) = 2.0*pi-0.5*xx
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             103     3       8v            do i = 2, nx
             104     3       8v             alon(i) = 0.5*xx+(i-1)*xx
             105     3       8v            end do
             106     2               !
             107     2                     else
             108     2               !
             109     2                     xx= (2.0*pi)/float(nx)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             110     3       8v            do i = 1, nx
             111     3       8v             alon(i) = (i-1)*xx
             112     3       8v            end do
             113     2               !
             114     2                     end if
             115     1               !----
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    PREFETCH       : 12
                                   <<<      xr: 12
                                   <<< Loop-information  End >>>
             116     2       6s            do ix = 1, nx
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<<    PREFETCH       : 2
                                   <<<      alon0: 2
                                   <<< Loop-information  End >>>
             117     3       6             do i  = 1, im
             118     4       6m            if( alon(ix).ge.alon0(i) .and. alon(ix).lt.alon0(i+1) )then
             119     4       6s               xr(ix) = float(i) + (alon(ix)-alon0(i))/(alon0(i+1)-alon0(i))
             120     4       6v            end if
             121     3       6             end do
             122     2                     end do
             123     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    PREFETCH       : 12
                                   <<<      yr: 12
                                   <<< Loop-information  End >>>
             124     2       6s            do jy = 1, my
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<<    PREFETCH       : 2
                                   <<<      alat0: 2
                                   <<< Loop-information  End >>>
             125     3       6             do j  = 1, jend
             126     4       6m            if( alat(jy).ge.alat0(j) .and. alat(jy).lt.alat0(j+1) )then
             127     4       6s               yr(jy) = float(j) + (alat(jy)-alat0(j))/(alat0(j+1)-alat0(j))
             128     4       6v            end if
             129     3       6             end do
             130     2                     end do
             131     1               !
             132     1                     end if
             133                     !------------------
             134                     !
             135                     !  check if the fields is of wind
             136                     !
             137                     !----
             138     1                     if( flag0.eq.'gg' .or. flag0.eq.'GG' .or. flag0.eq.'gx'  &
             139     1                         .or. flag0.eq.'GX')then
             140     1               !
             141     2                     do j = 1, jm
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             142     3       8v            do i = 1, im
             143     3       8v             aaa(i,j+1) = ain(i,j)
             144     3       8v            end do
             145     2                     end do
             146     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             147     2       6v            do j = 2, jm+1
             148     2       6v             aaa(im+1,j) = aaa(1,j)
             149     2       6v            end do
             150     1               !
             151     2                     if( iwnd .eq. 1 ) then
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             152     3       8v             do i = 1, im+1
             153     3       8v              aaa(i,1) = 0.
             154     3       8v              aaa(i,jm+2) = 0.
             155     3       8v             end do
             156     2                     else   ! ---- else
             157     2                      ps= ain(1,1)
             158     2                      pn= ain(1,jm)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             159     3       8v             do i = 2, im
             160     3       8v              ps= ps + ain(i,1)
             161     3       8v              pn= pn + ain(i,jm)
             162     3       8v             end do
             163     2                       ps = ps/float(im)
             164     2                       pn = pn/float(im)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             165     3       8v             do i = 1, im+1
             166     3       8v              aaa(i,1) = ps
             167     3       8v              aaa(i,jm+2) = pn
             168     3       8v             end do
             169     2                     end if
             170     1               !
             171     1                     else   !--- else
             172     1               !
             173     1                     ps = ain(1,1)
             174     1                     pn = ain(1,jm)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED(lines: 175,181)
                                   <<< Loop-information  End >>>
             175     2                     do j = 1, jm
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             176     3       8v            do i = 1, im
             177     3       8v             aaa(i,j) = ain(i,j)
             178     3       8v            end do
             179     2                     end do
             180     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED
                                   <<< Loop-information  End >>>
             181     2                     do j = 1, jm
             182     2                      aaa(im+1,j) = aaa(1,j)
             183     2                     end do
             184     1               !
             185     1                     end if
             186                     !----
             187                     !
             188                           mn = 0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      yr: 2
                                   <<< Loop-information  End >>>
             189     1                     do j = 1, my
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             190     2       8v            do i = 1, nx
             191     2       8v             mn = mn+1
             192     2       8v             wkx(mn) = xr(i)
             193     2       8v             wky(mn) = yr(j)
             194     2       8v            end do
             195     1                     end do
             196                     !
             197                           nxmy = nx*my
             198                     !
             199     1                     if( flag0.eq.'gg' .or. flag0.eq.'GG' .or. flag0.eq.'gx'  &
             200     1                            .or. flag0.eq.'GX' )then
             201     1                      call bcubij(aaa,im+1,jm+2,bbb,nxmy,wkx,wky)
             202     1                     else
             203     1                      call bcubij(aaa,im+1,jm  ,bbb,nxmy,wkx,wky)
             204     1                     end if
             205                     !
             206                           mn = 0
             207     1                     do j = 1, my
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             208     2       8v            do i = 1, nx
             209     2       8v             mn = mn+1
             210     2       8v             aout(i,j) = bbb(mn)
             211     2       8v            end do
             212     1                     end do
             213                     !
             214     1                     if( flag.eq.'ga' .or. flag.eq.'GA' ) then
             215     2                      if( iwnd .eq. 1 ) then
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             216     3       8v              do i = 1, nx
             217     3       8v               aout(i,1) = 0.
             218     3       8v               aout(i,my) = 0.
             219     3       8v              end do
             220     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             221     3       8v              do i = 1, nx
             222     3       8v               aout(i,1) = ps
             223     3       8v               aout(i,my) = pn
             224     3       8v              end do
             225     2                      end if
             226     1                     end if
             227                     !
             228                           return
             229                           end

 Diagnostic messages: program name(xyintpo)
   jwd8220o-i  "gm2gm_sub.f90", line 1: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8300o-i  "gm2gm_sub.f90", line 34: The intrinsic function was changed to a multi-operation function.
   jwd6001s-i  "gm2gm_sub.f90", line 34: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8664o-i  "gm2gm_sub.f90", line 34: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "gm2gm_sub.f90", line 34: Loop unrolled 8 times.
   jwd6001s-i  "gm2gm_sub.f90", line 44: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8220o-i  "gm2gm_sub.f90", line 44: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 44: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 44: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd8209o-i  "gm2gm_sub.f90", line 45: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 53: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8220o-i  "gm2gm_sub.f90", line 53: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 53: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 53: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 224.
   jwd8209o-i  "gm2gm_sub.f90", line 54: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 67: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 68: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8220o-i  "gm2gm_sub.f90", line 68: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 68: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 68: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd8300o-i  "gm2gm_sub.f90", line 77: The intrinsic function was changed to a multi-operation function.
   jwd6001s-i  "gm2gm_sub.f90", line 77: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8664o-i  "gm2gm_sub.f90", line 77: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "gm2gm_sub.f90", line 77: Loop unrolled 8 times.
   jwd6001s-i  "gm2gm_sub.f90", line 84: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8220o-i  "gm2gm_sub.f90", line 84: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 84: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 84: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd8209o-i  "gm2gm_sub.f90", line 85: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 87: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 101: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 103: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8220o-i  "gm2gm_sub.f90", line 103: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 103: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 103: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd8209o-i  "gm2gm_sub.f90", line 109: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 110: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8220o-i  "gm2gm_sub.f90", line 110: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "gm2gm_sub.f90", line 110: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 110: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd8211o-i  "gm2gm_sub.f90", line 116: Loops interchanged at line 117.
   jwd6229s-i  "gm2gm_sub.f90", line 116: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "gm2gm_sub.f90", line 116: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 116: Loop unrolled 6 times.
   jwd8211o-i  "gm2gm_sub.f90", line 117: Loops interchanged at line 116.
   jwd8211o-i  "gm2gm_sub.f90", line 124: Loops interchanged at line 125.
   jwd6229s-i  "gm2gm_sub.f90", line 124: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "gm2gm_sub.f90", line 124: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 124: Loop unrolled 6 times.
   jwd8211o-i  "gm2gm_sub.f90", line 125: Loops interchanged at line 124.
   jwd6001s-i  "gm2gm_sub.f90", line 142: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 142: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 142: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "gm2gm_sub.f90", line 147: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8663o-i  "gm2gm_sub.f90", line 147: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 147: Loop unrolled 6 times.
   jwd6001s-i  "gm2gm_sub.f90", line 152: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 152: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 152: Loop unrolled 8 times.
   jwd6004s-i  "gm2gm_sub.f90", line 159: SIMD conversion is applied to DO loop with DO variable 'i'. The DO loop contains a reduction operation.
   jwd8204o-i  "gm2gm_sub.f90", line 159: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 159: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd8208o-i  "gm2gm_sub.f90", line 160: Method of calculating sum or product is changed.
   jwd8208o-i  "gm2gm_sub.f90", line 161: Method of calculating sum or product is changed.
   jwd6001s-i  "gm2gm_sub.f90", line 165: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 165: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 165: Loop unrolled 8 times.
   jwd8210o-i  "gm2gm_sub.f90", line 175: Loops fused at line 181.
   jwd6001s-i  "gm2gm_sub.f90", line 176: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 176: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 176: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "gm2gm_sub.f90", line 190: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 190: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 190: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "gm2gm_sub.f90", line 208: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 208: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 208: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "gm2gm_sub.f90", line 216: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 216: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 216: Loop unrolled 8 times.
   jwd6001s-i  "gm2gm_sub.f90", line 221: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 221: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 221: Loop unrolled 8 times.

 Procedure information
   Lines      : 229
   Statements : 163
   Stack(byte): 960
   Prefetch num: 30

 Scoping unit of external sub-program : xyintpo
   Attribute and Cross reference of name
     aaa
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 20
      |(Definition)     : 143  148  153  154  166  167  177  182  201  203
      |(Reference)      : 148  182
     ain
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  11
      |(Definition)     : 
      |(Reference)      : 143  157  158  160  161  173  174  177
     alat
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 78  85  87  88
      |(Reference)      : 126  126  127
     alat0
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 35  37  38  45  54  56  57
      |(Reference)      : 126  126  127  127  127
     alon
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 102  104  111
      |(Reference)      : 118  118  119
     alon0
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 69  71
      |(Reference)      : 118  118  119  119  119
     aout
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  11
      |(Definition)     : 210  217  218  222  223
      |(Reference)      : 
     asin
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 35  78
     atan
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 24
     bbb
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 20
      |(Definition)     : 201  203
      |(Reference)      : 210
     bcubij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 201  203
     first
      |(Class and Type) : variable name, LOGICAL(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  14
      |(Definition)     : 
      |(Reference)      : 27
     flag
      |(Class and Type) : variable name, CHARACTER(2,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  12
      |(Definition)     : 
      |(Reference)      : 73  73  81  81  92  214  214
     flag0
      |(Class and Type) : variable name, CHARACTER(2,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  12
      |(Definition)     : 
      |(Reference)      : 31  31  41  41  51  51  62  97  97  138  138  138  138  199  199  199  199
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 43  52  67  83  101  109  119  127  163  164
     gausl3
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 33  75
     i
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 10
      |(Definition)     : 68  103  110  117  142  152  159  165  176  190  208  216  221
      |(Reference)      : 69  69  104  104  111  111  118  118  119  119  119  119  143  143  153  154  160  161  166  167  177  177  192  210  217  218  222  223
     im
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  10
      |(Definition)     : 
      |(Reference)      : 11  18  20  67  68  71  117  142  148  152  159  163  164  165  176  182  201  203
     iwnd
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  13
      |(Definition)     : 
      |(Reference)      : 151  215
     ix
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 10
      |(Definition)     : 116
      |(Reference)      : 118  118  119  119
     j
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 10
      |(Definition)     : 34  44  53  77  84  125  141  147  175  181  189  207
      |(Reference)      : 35  35  45  45  54  54  78  78  85  85  126  126  127  127  127  127  143  143  148  148  177  177  182  182  193  210
     jend
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 21
      |(Definition)     : 39  47  58
      |(Reference)      : 125
     jm
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  10
      |(Definition)     : 33  203
      |(Reference)      : 11  18  18  18  20  34  38  39  43  44  47  52  53  57  58  141  147  154  158  161  167  174  175  181  201
     jy
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 10
      |(Definition)     : 124
      |(Reference)      : 126  126  127  127
     mn
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 21
      |(Definition)     : 188  191  206  209
      |(Reference)      : 191  192  193  209  210
     my
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  10
      |(Definition)     : 75
      |(Reference)      : 11  11  18  18  18  20  20  20  77  83  84  88  124  189  197  207  218  223
     nx
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1  10
      |(Definition)     : 
      |(Reference)      : 11  11  18  20  20  20  101  103  109  110  116  190  197  208  216  221
     nxmy
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 21
      |(Definition)     : 197  201  203
      |(Reference)      : 
     pi
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 22
      |(Definition)     : 24
      |(Reference)      : 37  38  43  45  52  54  56  57  67  71  83  85  87  88  101  102  109
     pn
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 22
      |(Definition)     : 158  161  164  174
      |(Reference)      : 161  164  167  223
     ps
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 22
      |(Definition)     : 157  160  163  173
      |(Reference)      : 160  163  166  222
     sinl
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 75
      |(Reference)      : 78
     sinl0
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 33
      |(Reference)      : 35
     weight
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 75
      |(Reference)      : 
     weight0
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 18
      |(Definition)     : 33
      |(Reference)      : 
     wkx
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 20
      |(Definition)     : 192  201  203
      |(Reference)      : 
     wky
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 20
      |(Definition)     : 193  201  203
      |(Reference)      : 
     xr
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  11
      |(Definition)     : 119
      |(Reference)      : 192
     xx
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 22
      |(Definition)     : 67  101  109
      |(Reference)      : 69  102  104  104  111
     xyintpo
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1
      |(Reference)      : 
     yr
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  11
      |(Definition)     : 127
      |(Reference)      : 193
     yy
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 22
      |(Definition)     : 43  52  83
      |(Reference)      : 45  54  54  85

 External subroutine subprogram "bcubij"
  (inc)(line-no.)(nest)(optimize)
             230                     
             231                           subroutine bcubij(f,ix,jy,dout,mn,xin,yin)
             232                     !
             233                     !  parameter list
             234                     !
             235                     !  f,ix,jy,dout,mn,xin,yin - see below
             236                     !
             237                           real :: f(ix,jy),dout(mn),xin(mn),yin(mn)
             238                     !
             239                     !
             240                     !  working array
             241                           real,dimension(ix,jy) ::  fxx,fyy,tp3
             242                           real,dimension(mn,4) ::   pix,pjy,tp1,tp2
             243                           dimension ipt(mn)
             244                     !
             245                     !          a bicubic spline interpolator to interpolate from a grid
             246                     !          with constant grid spacing to a grid with constant or
             247                     !          variable grid spacing. all grids are assumed to have point
             248                     !          (1,1) in the lower left corner with i increasing to the right
             249                     !          and j increasing upward.
             250                     !
             251                     !          arguments:
             252                     !
             253                     !          f(ix,jy): fwa of data array to be interpolated from (given
             254                     !                    by user)
             255                     !
             256                     !          ix: first (i) dimension of f (given by user)
             257                     !
             258                     !          jy: second (j) dimension of f (given by user)
             259                     !
             260                     !          dout(mn): fwa of array of interpolated values (given on
             261                     !                     output)
             262                     !
             263                     !
             264                     !         mn: number of points (dimension) of output grid
             265                     !
             266                     !          xin(mn): x-coordinates of points in dout relative to the
             267                     !                   x-coordinates of f. a "1" refers to the leftmost
             268                     !                   boundary of f (given by user)
             269                     !
             270                     !          yin(mn): y-coordinates of points in dout relative to the
             271                     !                   y-corrdinates of f. a "1" refers to the bottom
             272                     !                   row of f (given by user)
             273                     !
             274                     !   scratch work arrays
             275                     !
             276                     !          pix(mn,4): array to hold coefficients for interpolation in
             277                     !                     x-direction
             278                     !
             279                     !          pjy(mn,4): array to hold coefficients for interpolation in
             280                     !                     y-direction
             281                     !
             282                     !          tp1(mn,4): work space
             283                     !
             284                     !          tp2(mn,4): work space
             285                     !
             286                     !          tp3(ix,jy): work space
             287                     !
             288                     !          fxx(ix,jy): array to hold cubic spline values (computed
             289                     !                      internally)
             290                     !
             291                     !          fyy(ix,jy): array to hold cubic spline values (computed
             292                     !                      internally)
             293                     !
             294                     !          ipt(mn): array that holds 2-d coordinate, relative to f grid,
             295                     !                   of each point in dout
             296                     !
             297                     !          compute ipt,jpt,pix and pjy
             298                     !
             299                           call stupij(xin,yin,mn,ix,pix,pjy,ipt)
             300                     !
             301                           ijm2=ix*jy-2
             302                           ixjym2=ix*(jy-2)
             303                     !
             304                     !          interpolate in x-direction
             305                     !
             306                     !          compute fyy
             307                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             308     1       8v            do 100 i=1,ixjym2
             309     1       8v            fyy(i,2)=(f(i,1)-2.0*f(i,2)+f(i,3))
             310     1       8v        100 continue
             311                           call trdih(ix,jy-2,fyy(1,2))
             312                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             313     1       8v            do 105 i=1,ix
             314     1       8v            fyy(i,1)= 0.0
             315     1       8v            fyy(i,jy)= 0.0
             316     1       8v        105 continue
             317                     !
             318                     !          compute fxxyy
             319                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             320     1       6v            do 130 i=1,ijm2
             321     1       6v            fxx(i+1,1)= fyy(i,1)+(fyy(i+2,1)-2.0*fyy(i+1,1))
             322     1       6v        130 continue
             323                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             324     1       4v            do 205 j=1,jy
             325     1       4v            fxx(1,j)= fyy(ix,j)-2.0*fyy(1,j)+fyy(2,j)
             326     1       4v            fxx(ix,j)= fyy(ix-1,j)-2.0*fyy(ix,j)+fyy(1,j)
             327     1       4v        205 continue
             328                     !
             329                           call tpose(fxx,ix,jy,tp3)
             330                           call trdiph(jy,ix,tp3)
             331                           call tpose(tp3,jy,ix,fxx)
             332                     !
             333                     !          fxx holds fxxyy and fyy holds fyy
             334                     !
             335                           call gathij(1,mn,ix,jy,ipt,fxx,fyy,tp2)
             336                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             337     1       4v            do 550 i=1,mn
             338     1       4v            tp2(i,1)= pix(i,1)*tp2(i,1)
             339     1       4v            tp2(i,2)= pix(i,2)*tp2(i,2)
             340     1       4v            tp2(i,3)= pix(i,3)*tp2(i,3)
             341     1       4v            tp2(i,4)= pix(i,4)*tp2(i,4)
             342     1       4v            tp1(i,1)=tp2(i,1)+tp2(i,2)+tp2(i,3)+tp2(i,4)
             343     1       4v        550 continue
             344                     !
             345                           call gathij(0,mn,ix,jy,ipt,fxx,fyy,tp2)
             346                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             347     1       4v            do 555 i=1,mn
             348     1       4v            tp2(i,1)= pix(i,1)*tp2(i,1)
             349     1       4v            tp2(i,2)= pix(i,2)*tp2(i,2)
             350     1       4v            tp2(i,3)= pix(i,3)*tp2(i,3)
             351     1       4v            tp2(i,4)= pix(i,4)*tp2(i,4)
             352     1       4v            tp1(i,2)=tp2(i,1)+tp2(i,2)+tp2(i,3)+tp2(i,4)
             353     1       4v        555 continue
             354                     !
             355                     !          compute fxx
             356                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             357     1       6v            do 170 i=1,ijm2
             358     1       6v            fxx(i+1,1)= f(i,1)+f(i+2,1)-2.0*f(i+1,1)
             359     1       6v        170 continue
             360                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             361     1       4v            do 155 j=1,jy
             362     1       4v            fxx(1,j)= f(ix,j)-2.0*f(1,j)+f(2,j)
             363     1       4v            fxx(ix,j)= f(ix-1,j)-2.0*f(ix,j)+f(1,j)
             364     1       4v        155 continue
             365                     !
             366                           call tpose(fxx,ix,jy,tp3)
             367                           call trdiph(jy,ix,tp3)
             368                           call tpose(tp3,jy,ix,fxx)
             369                     !
             370                           call gathij(1,mn,ix,jy,ipt,fxx,f,tp2)
             371                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             372     1       4v            do 560 i=1,mn
             373     1       4v            tp2(i,1)= pix(i,1)*tp2(i,1)
             374     1       4v            tp2(i,2)= pix(i,2)*tp2(i,2)
             375     1       4v            tp2(i,3)= pix(i,3)*tp2(i,3)
             376     1       4v            tp2(i,4)= pix(i,4)*tp2(i,4)
             377     1       4v            tp1(i,3)=tp2(i,1)+tp2(i,2)+tp2(i,3)+tp2(i,4)
             378     1       4v        560 continue
             379                     !
             380                           call gathij(0,mn,ix,jy,ipt,fxx,f,tp2)
             381                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 2
                                   <<<      tp1: 2
                                   <<< Loop-information  End >>>
             382     1       2v            do 570 i=1,mn
             383     1       2v            tp2(i,1)= pix(i,1)*tp2(i,1)
             384     1       2v            tp2(i,2)= pix(i,2)*tp2(i,2)
             385     1       2v            tp2(i,3)= pix(i,3)*tp2(i,3)
             386     1       2v            tp2(i,4)= pix(i,4)*tp2(i,4)
             387     1       2v            tp1(i,4)=tp2(i,1)+tp2(i,2)+tp2(i,3)+tp2(i,4)
             388     1               !
             389     1               !          interpolate in y-direction
             390     1               !
             391     1       2v            tp1(i,1)= tp1(i,1)*pjy(i,1)
             392     1       2v            tp1(i,2)= tp1(i,2)*pjy(i,2)
             393     1       2v            tp1(i,3)= tp1(i,3)*pjy(i,3)
             394     1       2v            tp1(i,4)= tp1(i,4)*pjy(i,4)
             395     1       2v            dout(i)=tp1(i,1)+tp1(i,2)+tp1(i,3)+tp1(i,4)
             396     1       2v        570 continue
             397                           return
             398                           end

 Diagnostic messages: program name(bcubij)
   jwd8220o-i  "gm2gm_sub.f90", line 231: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 308: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "gm2gm_sub.f90", line 308: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 308: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 308: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd8209o-i  "gm2gm_sub.f90", line 309: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 313: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 313: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 313: Loop unrolled 8 times.
   jwd6001s-i  "gm2gm_sub.f90", line 320: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "gm2gm_sub.f90", line 320: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 320: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 320: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 120.
   jwd8209o-i  "gm2gm_sub.f90", line 321: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 324: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8209o-i  "gm2gm_sub.f90", line 324: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 324: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 324: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 112.
   jwd8209o-i  "gm2gm_sub.f90", line 325: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 326: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 337: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 337: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 337: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8209o-i  "gm2gm_sub.f90", line 339: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 342: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 347: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 347: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 347: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8209o-i  "gm2gm_sub.f90", line 349: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 352: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 357: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "gm2gm_sub.f90", line 357: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 357: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 357: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 120.
   jwd8209o-i  "gm2gm_sub.f90", line 358: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 361: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8209o-i  "gm2gm_sub.f90", line 361: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 361: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 361: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 112.
   jwd8209o-i  "gm2gm_sub.f90", line 362: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 363: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 372: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 372: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 372: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8209o-i  "gm2gm_sub.f90", line 374: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 377: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 382: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 382: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 382: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "gm2gm_sub.f90", line 384: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 387: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 395: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 169
   Statements : 75
   Stack(byte): 496
   Prefetch num: 8

 Scoping unit of external sub-program : bcubij
   Attribute and Cross reference of name
     bcubij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 231
      |(Reference)      : 
     dout
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 231  237
      |(Definition)     : 395
      |(Reference)      : 
     f
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 231  237
      |(Definition)     : 370  380
      |(Reference)      : 309  309  309  358  358  358  362  362  362  363  363  363
     fxx
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 241
      |(Definition)     : 321  325  326  329  331  335  345  358  362  363  366  368  370  380
      |(Reference)      : 
     fyy
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 241
      |(Definition)     : 309  311  314  315  335  345
      |(Reference)      : 321  321  321  325  325  325  326  326  326
     gathij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 335  345  370  380
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 308  313  320  337  347  357  372  382
      |(Reference)      : 309  309  309  309  314  315  321  321  321  321  338  338  338  339  339  339  340  340  340  341  341  341  342  342  342  342  342  348  348  348  349  349  349  350  350  350  351  351  351  352  352  352  352  352  358  358  358  358  373  373  373  374  374  374  375  375  375  376  376  376  377  377  377  377  377  383  383  383  384  384  384  385  385  385  386  386  386  387  387  387  387  387  391  391  391  392  392  392  393  393  393  394  394  394  395  395  395  395  395
     ijm2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 301
      |(Reference)      : 320  357
     ipt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 243
      |(Definition)     : 299  335  345  370  380
      |(Reference)      : 
     ix
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 231
      |(Definition)     : 299  311  329  330  331  335  345  366  367  368  370  380
      |(Reference)      : 237  241  241  241  301  302  313  325  326  326  326  362  363  363  363
     ixjym2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 302
      |(Reference)      : 308
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 324  361
      |(Reference)      : 325  325  325  325  326  326  326  326  362  362  362  362  363  363  363  363
     jy
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 231
      |(Definition)     : 329  330  331  335  345  366  367  368  370  380
      |(Reference)      : 237  241  241  241  301  302  311  315  324  361
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 231
      |(Definition)     : 299  335  345  370  380
      |(Reference)      : 237  237  237  242  242  242  242  243  337  347  372  382
     pix
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 242
      |(Definition)     : 299
      |(Reference)      : 338  339  340  341  348  349  350  351  373  374  375  376  383  384  385  386
     pjy
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 242
      |(Definition)     : 299
      |(Reference)      : 391  392  393  394
     stupij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 299
     tp1
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 242
      |(Definition)     : 342  352  377  387  391  392  393  394
      |(Reference)      : 391  392  393  394  395  395  395  395
     tp2
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 242
      |(Definition)     : 335  338  339  340  341  345  348  349  350  351  370  373  374  375  376  380  383  384  385  386
      |(Reference)      : 338  339  340  341  342  342  342  342  348  349  350  351  352  352  352  352  373  374  375  376  377  377  377  377  383  384  385  386  387  387  387  387
     tp3
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 241
      |(Definition)     : 329  330  331  366  367  368
      |(Reference)      : 
     tpose
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 329  331  366  368
     trdih
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 311
     trdiph
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 330  367
     xin
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 231  237
      |(Definition)     : 299
      |(Reference)      : 
     yin
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 231  237
      |(Definition)     : 299
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        100  execution     (Definition) 310  
                           (Reference)  308
        105  execution     (Definition) 316  
                           (Reference)  313
        130  execution     (Definition) 322  
                           (Reference)  320
        155  execution     (Definition) 364  
                           (Reference)  361
        170  execution     (Definition) 359  
                           (Reference)  357
        205  execution     (Definition) 327  
                           (Reference)  324
        550  execution     (Definition) 343  
                           (Reference)  337
        555  execution     (Definition) 353  
                           (Reference)  347
        560  execution     (Definition) 378  
                           (Reference)  372
        570  execution     (Definition) 396  
                           (Reference)  382

 External subroutine subprogram "stupij"
  (inc)(line-no.)(nest)(optimize)
             399                           subroutine stupij(xin,yin,mn,ix,pix,pjy,ijpt)
             400                     !
             401                           dimension xin(mn),yin(mn),pix(mn,4),pjy(mn,4)
             402                           dimension ijpt(mn)
             403                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             404     1       4v            do 20 i=1,mn
             405     1       4v            ipt= int(xin(i))
             406     1       4v            jpt= int(yin(i))
             407     1       4v            pix(i,3)= xin(i)-float(ipt)
             408     1       4v            pjy(i,3)= yin(i)-float(jpt)
             409     1       4v            pix(i,4)= 1.0-pix(i,3)
             410     1       4v            pjy(i,4)= 1.0-pjy(i,3)
             411     1       4v            ijpt(i)= ipt+ix*jpt
             412     1       4v         20 continue
             413                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             414     1       6v            do 30 i=1,mn*2
             415     1       6v            pix(i,1)= pix(i,3)*(pix(i,3)*pix(i,3)-1.0)
             416     1       6v            pjy(i,1)= pjy(i,3)*(pjy(i,3)*pjy(i,3)-1.0)
             417     1       6v         30 continue
             418                           return
             419                           end

 Diagnostic messages: program name(stupij)
   jwd6001s-i  "gm2gm_sub.f90", line 404: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 404: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 404: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd6001s-i  "gm2gm_sub.f90", line 414: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 414: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 414: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.

 Procedure information
   Lines      : 21
   Statements : 18
   Stack(byte): 16
   Prefetch num: 0

 Scoping unit of external sub-program : stupij
   Attribute and Cross reference of name
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 407  408
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 404  414
      |(Reference)      : 405  406  407  407  408  408  409  409  410  410  411  415  415  415  415  416  416  416  416
     ijpt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 399  402
      |(Definition)     : 411
      |(Reference)      : 
     int
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 405  406
     ipt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 405
      |(Reference)      : 407  411
     ix
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 399
      |(Definition)     : 
      |(Reference)      : 411
     jpt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 406
      |(Reference)      : 408  411
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 399
      |(Definition)     : 
      |(Reference)      : 401  401  401  401  402  404  414
     pix
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 399  401
      |(Definition)     : 407  409  415
      |(Reference)      : 409  415  415  415
     pjy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 399  401
      |(Definition)     : 408  410  416
      |(Reference)      : 410  416  416  416
     stupij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 399
      |(Reference)      : 
     xin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 399  401
      |(Definition)     : 
      |(Reference)      : 405  407
     yin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 399  401
      |(Definition)     : 
      |(Reference)      : 406  408
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         20  execution     (Definition) 412  
                           (Reference)  404
         30  execution     (Definition) 417  
                           (Reference)  414

 External subroutine subprogram "trdih"
  (inc)(line-no.)(nest)(optimize)
             420                           subroutine trdih (m,n,y)
             421                     !
             422                     !  vectorized tri-diagonal gaussian elimintaion solver
             423                     !
             424                           dimension y(m,n),c(5000)
             425                     !
             426                     ! gaussian elimination
             427                     !
             428                           c(1) = 0.25
             429                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             430     1       8v            do 201 i=1,m
             431     1       8v            y(i,1)= y(i,1)*c(1)
             432     1       8v        201 continue
             433                     !
             434     1                     do 103 j=2,n-1
             435     1                     c(j)= 1.0/(4.0-c(j-1))
             436     1               !DIR$ IVDEP
             437     1               !ocl  novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             438     2       8v            do 103 i=1,m
             439     2       8v            y(i,j)= (y(i,j)-y(i,j-1))*c(j)
             440     1       8v        103 continue
             441                     !
             442                     !DIR$ IVDEP
             443                     !ocl  novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             444     1       8v            do 202 i=1,m
             445     1       8v            y(i,n)=(y(i,n)-y(i,n-1))/(4.0-c(n-1))
             446     1       8v        202 continue
             447                     !
             448                     ! backwards substitution
             449                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      c: 2
                                   <<< Loop-information  End >>>
             450     1                     do 104 k=n-1,1,-1
             451     1               !DIR$ IVDEP
             452     1               !ocl  novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             453     2       8v            do 104 i=1,m
             454     2       8v            y(i,k)= y(i,k)-c(k)*y(i,k+1)
             455     1       8v        104 continue
             456                           return
             457                           end

 Diagnostic messages: program name(trdih)
   jwd8220o-i  "gm2gm_sub.f90", line 420: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 430: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 430: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 430: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd6001s-i  "gm2gm_sub.f90", line 438: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 438: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 438: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd6001s-i  "gm2gm_sub.f90", line 444: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8662o-i  "gm2gm_sub.f90", line 444: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 444: Loop unrolled 8 times.
   jwd8206o-i  "gm2gm_sub.f90", line 445: Division is changed to multiplication by reciprocal.
   jwd6001s-i  "gm2gm_sub.f90", line 453: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 453: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 453: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.

 Procedure information
   Lines      : 38
   Statements : 20
   Stack(byte): 40000
   Prefetch num: 2

 Scoping unit of external sub-program : trdih
   Attribute and Cross reference of name
     c
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 424
      |(Definition)     : 428  435
      |(Reference)      : 431  435  439  445  454
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 430  438  444  453
      |(Reference)      : 431  431  439  439  439  445  445  445  454  454  454
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 434
      |(Reference)      : 435  435  439  439  439  439
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 450
      |(Reference)      : 454  454  454  454
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 420
      |(Definition)     : 
      |(Reference)      : 424  430  438  444  453
     n
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 420
      |(Definition)     : 
      |(Reference)      : 424  434  445  445  445  445  450
     trdih
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 420
      |(Reference)      : 
     y
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 420  424
      |(Definition)     : 431  439  445  454
      |(Reference)      : 431  439  439  445  445  454  454
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        103  execution     (Definition) 440  
                           (Reference)  434  438
        104  execution     (Definition) 455  
                           (Reference)  450  453
        201  execution     (Definition) 432  
                           (Reference)  430
        202  execution     (Definition) 446  
                           (Reference)  444

 External subroutine subprogram "tpose"
  (inc)(line-no.)(nest)(optimize)
             458                           subroutine tpose(x,im,jm,y)
             459                           dimension x(im,jm),y(jm,im)
             460     1                     do 1 i=1,im
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             461     2        v            do 1 j=1,jm
             462     1        v          1 y(j,i)= x(i,j)
             463                           return
             464                           end

 Diagnostic messages: program name(tpose)
   jwd6001s-i  "gm2gm_sub.f90", line 461: SIMD conversion is applied to DO loop with DO variable 'j'.
   jwd8204o-i  "gm2gm_sub.f90", line 461: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 461: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 44.

 Procedure information
   Lines      : 7
   Statements : 7
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : tpose
   Attribute and Cross reference of name
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 460
      |(Reference)      : 462  462
     im
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 458
      |(Definition)     : 
      |(Reference)      : 459  459  460
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 461
      |(Reference)      : 462  462
     jm
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 458
      |(Definition)     : 
      |(Reference)      : 459  459  461
     tpose
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 458
      |(Reference)      : 
     x
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 458  459
      |(Definition)     : 
      |(Reference)      : 462
     y
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 458  459
      |(Definition)     : 462
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          1  execution     (Definition) 462  
                           (Reference)  460  461

 External subroutine subprogram "trdiph"
  (inc)(line-no.)(nest)(optimize)
             465                           subroutine trdiph (m,n,y)
             466                     !
             467                     !  vectorized periodic gaussian elimination solver
             468                     !
             469                           dimension y(m,n),work(10000)
             470                     !
             471                     ! gaussian elimination
             472                     !
             473                           nt2= 2*n
             474                           work(n+1)= 0.25
             475                           v = 1.0
             476                           work(1) = work(n+1)
             477                           work(nt2+1) = work(n+1)
             478                           bn = -v*work(nt2+1)+4.0
             479     1       4s            do 101 j=2,n-2
             480     1       4v               ne = j+n
             481     1       4s               work(ne) = 1.0/(4.0-work(j-1))
             482     1       4s               work(j) = work(ne)
             483     1       4s               nu = j+nt2
             484     1       4s               work(nu) = -work(nu-1)*work(ne)
             485     1       4s               v = -v*work(j-1)
             486     1       4m               bn = bn-v*work(nu)
             487     1       4v        101 continue
             488                     !
             489                           v = 1.0-v*work(n-2)
             490                           ne = nt2
             491                           work(ne-1) = 1.0/(4.0-work(n-2))
             492                           nu = nt2+n
             493                           work(n-1) = (1.0-work(nu-2))*work(ne-1)
             494                           work(ne) = 1.0/(bn-v*work(n-1))
             495                     !
             496                           v= 1.0
             497                     !DIR$ IVDEP
             498                     !ocl  novrec
             499     1       6s            do 201 i=1,m
             500     1       6s            y(i,1)= y(i,1)*work(n+1)
             501     1       6s            work(i+3*n)=y(i,n)-v*y(i,1)
             502     1       6s        201 continue
             503                     !
             504     1                     do 103 j=2,n-2
             505     1                     v= -v*work(j-1)
             506     1                        ne = j+n
             507     1               !DIR$ IVDEP
             508     1               !ocl  novrec
             509     2       6s            do 113 i=1,m
             510     2       6m            y(i,j)= (y(i,j)-y(i,j-1))*work(ne)
             511     2       6s            work(i+3*n)= work(i+3*n)-v*y(i,j)
             512     2       6v        113 continue
             513     1                 103 continue
             514                           v = 1.0-v*work(n-2)
             515                           ne = nt2
             516                     !DIR$ IVDEP
             517                     !ocl  novrec
             518     1       4s            do 203 i=1,m
             519     1       4m            y(i,n-1)=(y(i,n-1)-y(i,n-2))*work(ne-1)
             520     1       4s            work(i+3*n)= work(i+3*n)-v*y(i,n-1)
             521     1               !
             522     1               ! backwards substitution
             523     1               !
             524     1       4m            y(i,n)= work(i+3*n)*work(ne)
             525     1       4m            y(i,n-1)= y(i,n-1)-work(n-1)*y(i,n)
             526     1       4v        203 continue
             527                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      work: 4
                                   <<< Loop-information  End >>>
             528     1                     do 104 k=n-2,1,-1
             529     1               	 nu = k+nt2
             530     1               !DIR$ IVDEP
             531     1               !ocl  novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             532     2       8v            do 104 i=1,m
             533     2       8v            y(i,k)= y(i,k)-work(k)*y(i,k+1)-work(nu)*y(i,n)
             534     1       8v        104 continue
             535                           return
             536                           end

 Diagnostic messages: program name(trdiph)
   jwd8220o-i  "gm2gm_sub.f90", line 465: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8209o-i  "gm2gm_sub.f90", line 478: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8662o-i  "gm2gm_sub.f90", line 479: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 479: Loop unrolled 4 times.
   jwd6202s-i  "gm2gm_sub.f90", line 481: SIMD conversion cannot be applied to DO loop: data dependency of variable 'work' may cause different results from serial execution for loop.
   jwd6202s-i  "gm2gm_sub.f90", line 485: SIMD conversion cannot be applied to DO loop: data dependency of variable 'v' may cause different results from serial execution for loop.
   jwd8208o-i  "gm2gm_sub.f90", line 486: Method of calculating sum or product is changed.
   jwd8662o-i  "gm2gm_sub.f90", line 499: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 499: Loop unrolled 6 times.
   jwd6208s-i  "gm2gm_sub.f90", line 500: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'work' may be different from the order of data references in serial execution.
   jwd8662o-i  "gm2gm_sub.f90", line 509: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 509: Loop unrolled 6 times.
   jwd6208s-i  "gm2gm_sub.f90", line 510: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'work' may be different from the order of data references in serial execution.
   jwd8662o-i  "gm2gm_sub.f90", line 518: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 518: Loop unrolled 4 times.
   jwd6208s-i  "gm2gm_sub.f90", line 519: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'work' may be different from the order of data references in serial execution.
   jwd6001s-i  "gm2gm_sub.f90", line 532: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8662o-i  "gm2gm_sub.f90", line 532: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "gm2gm_sub.f90", line 532: Loop unrolled 8 times.

 Procedure information
   Lines      : 72
   Statements : 51
   Stack(byte): 80000
   Prefetch num: 4

 Scoping unit of external sub-program : trdiph
   Attribute and Cross reference of name
     bn
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 478  486
      |(Reference)      : 486  494
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 499  509  518  532
      |(Reference)      : 500  500  501  501  501  510  510  510  511  511  511  519  519  519  520  520  520  524  524  525  525  525  533  533  533  533
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 479  504
      |(Reference)      : 480  481  482  483  485  505  506  510  510  510  511
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 528
      |(Reference)      : 529  533  533  533  533
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 465
      |(Definition)     : 
      |(Reference)      : 469  499  509  518  532
     n
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 465
      |(Definition)     : 
      |(Reference)      : 469  473  474  476  477  479  480  489  491  492  493  494  500  501  501  504  506  511  511  514  519  519  519  520  520  520  524  524  525  525  525  525  528  533
     ne
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 480  490  506  515
      |(Reference)      : 481  482  484  491  493  494  510  519  524
     nt2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 473
      |(Reference)      : 477  478  483  490  492  515  529
     nu
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 483  492  529
      |(Reference)      : 484  484  486  493  533
     trdiph
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 465
      |(Reference)      : 
     v
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 475  485  489  496  505  514
      |(Reference)      : 478  485  486  489  494  501  505  511  514  520
     work
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 469
      |(Definition)     : 474  476  477  481  482  484  491  493  494  501  511  520
      |(Reference)      : 476  477  478  481  482  484  484  485  486  489  491  493  493  494  500  505  510  511  514  519  520  524  524  525  533  533
     y
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 465  469
      |(Definition)     : 500  510  519  524  525  533
      |(Reference)      : 500  501  501  510  510  511  519  519  520  525  525  533  533  533
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        101  execution     (Definition) 487  
                           (Reference)  479
        103  execution     (Definition) 513  
                           (Reference)  504
        104  execution     (Definition) 534  
                           (Reference)  528  532
        113  execution     (Definition) 512  
                           (Reference)  509
        201  execution     (Definition) 502  
                           (Reference)  499
        203  execution     (Definition) 526  
                           (Reference)  518

 External subroutine subprogram "gathij"
  (inc)(line-no.)(nest)(optimize)
             537                           subroutine gathij(kp,mn,ix,jy,ijpt,fxx,f,tp2)
             538                     !
             539                           dimension fxx(ix*jy),f(ix*jy),tp2(mn,4)
             540                           dimension ijpt(mn)
             541                     !
             542     1                     if(kp.eq.0) then
             543     1               !
             544     1               !  lower left corner of interpolation square
             545     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             546     2       6v            do 10 i=1,mn
             547     2       6v            inx= ijpt(i)-ix
             548     2       6v            tp2(i,2)= fxx(inx)
             549     2       6v            tp2(i,4)= f  (inx)
             550     2       6v         10 continue
             551     1               !
             552     1                     else
             553     1               !
             554     1               !  upper left corner of interpolation square
             555     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             556     2       6v            do 20 i=1,mn
             557     2       6v            tp2(i,2)= fxx(ijpt(i))
             558     2       6v            tp2(i,4)= f  (ijpt(i))
             559     2       6v         20 continue
             560     1                     endif
             561                     !
             562     1                     if(kp.eq.0) then
             563     1               !  lower right corner of interpolation square
             564     1                     i1= 1-ix
             565     1                     else
             566     1               !  upper right corner of interpolation square
             567     1                     i1= 1
             568     1                     endif
             569                     !
             570     1       6             do 30 i=1,mn
             571     1       6             inx= ijpt(i)+i1
             572     1       6             if(mod(inx,ix).eq.1) inx= inx-ix
             573     1       6             tp2(i,1)= fxx(inx)
             574     1       6             tp2(i,3)= f  (inx)
             575     1       6          30 continue
             576                     !
             577                           return
             578                           end

 Diagnostic messages: program name(gathij)
   jwd6001s-i  "gm2gm_sub.f90", line 546: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 546: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 546: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.
   jwd6001s-i  "gm2gm_sub.f90", line 556: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 556: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 556: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 120.
   jwd8670o-i  "gm2gm_sub.f90", line 570: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 570: Loop unrolled 6 times.
   jwd6101s-i  "gm2gm_sub.f90", line 572: SIMD conversion cannot be applied to the DO loop: a restricted statement was found in the loop.

 Procedure information
   Lines      : 42
   Statements : 28
   Stack(byte): 48
   Prefetch num: 0

 Scoping unit of external sub-program : gathij
   Attribute and Cross reference of name
     f
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 537  539
      |(Definition)     : 
      |(Reference)      : 549  558  574
     fxx
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 537  539
      |(Definition)     : 
      |(Reference)      : 548  557  573
     gathij
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 537
      |(Reference)      : 
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 546  556  570
      |(Reference)      : 547  548  549  557  557  558  558  571  573  574
     i1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 564  567
      |(Reference)      : 571
     ijpt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 537  540
      |(Definition)     : 
      |(Reference)      : 547  557  558  571
     inx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 547  571  572
      |(Reference)      : 548  549  572  572  573  574
     ix
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 537
      |(Definition)     : 
      |(Reference)      : 539  539  547  564  572  572
     jy
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 537
      |(Definition)     : 
      |(Reference)      : 539  539
     kp
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 537
      |(Definition)     : 
      |(Reference)      : 542  562
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 537
      |(Definition)     : 
      |(Reference)      : 539  540  546  556  570
     mod
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 572
     tp2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 537  539
      |(Definition)     : 548  549  557  558  573  574
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 550  
                           (Reference)  546
         20  execution     (Definition) 559  
                           (Reference)  556
         30  execution     (Definition) 575  
                           (Reference)  570

 External subroutine subprogram "dmsread"
  (inc)(line-no.)(nest)(optimize)
             579                           subroutine dmsread(nx,my,lrec,lenc,kflag,ifile,z,istat)
             580                     !
             581                     !  subroutine to read data in pressure level fields
             582                     !
             583                     ! **** input ****
             584                     !
             585                     !  lrec: field identifaction label
             586                     !  lenc: no. of data values in a 2-d lrec field
             587                     !  ifile: path/file name containing initial fields
             588                     !
             589                     ! **** output ****
             590                     !
             591                     !  z: array containing gaussian grid 2-d field
             592                     !  istat: status code. .ne. zero means bad read
             593                     !
             594                           dimension z(nx,my)
             595                           character lrec*26,ifile*48,kflag*1
             596                     !
             597                     ! working array
             598                     !
             599                     !      dimension y(lenc)
             600                           character key*34,crmk*88
             601                     !
             602                           write(key,1000)lrec,kflag,lenc
             603                      1000 format(a26,a1,i7.7)
             604                     !
             605                           call dmsget(ifile,key//char(0),z,istat)
             606                     !
             607     1                     if(istat.ne.0) then
             608     1                     write(crmk,100) key
             609     1                 100 format('#######  record ',a34,' missing  ######')
             610     1                     print*, crmk
             611     1                     call dmsexit(-1)
             612     1                     else
             613     1                     print *,'dms key=',key,' found'
             614     1                     endif
             615                     !
             616                     !      do 1 i=1,lenc
             617                     !        z(i,1)=y(i)
             618                     ! 1    continue
             619                     !
             620                           return
             621                           end

 Diagnostic messages: program name(dmsread)
   jwd8204o-i  "gm2gm_sub.f90", line 605: This loop is software pipelined.

 Procedure information
   Lines      : 43
   Statements : 17
   Stack(byte): 672
   Prefetch num: 0

 Scoping unit of external sub-program : dmsread
   Attribute and Cross reference of name
     char
      |(Class and Type) : intrinsic function name, CHARACTER((unknown),1)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 605
     crmk
      |(Class and Type) : variable name, CHARACTER(88,1)
      |(Attributes)     : 
      |(Declaration)    : 600
      |(Definition)     : 608
      |(Reference)      : 610
     dmsexit
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 611
     dmsget
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 605
     dmsread
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 579
      |(Reference)      : 
     ifile
      |(Class and Type) : variable name, CHARACTER(48,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579  595
      |(Definition)     : 605
      |(Reference)      : 
     istat
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579
      |(Definition)     : 605
      |(Reference)      : 607
     key
      |(Class and Type) : variable name, CHARACTER(34,1)
      |(Attributes)     : 
      |(Declaration)    : 600
      |(Definition)     : 602
      |(Reference)      : 605  608  613
     kflag
      |(Class and Type) : variable name, CHARACTER(1,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579  595
      |(Definition)     : 
      |(Reference)      : 602
     lenc
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579
      |(Definition)     : 
      |(Reference)      : 602
     lrec
      |(Class and Type) : variable name, CHARACTER(26,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579  595
      |(Definition)     : 
      |(Reference)      : 602
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579
      |(Definition)     : 
      |(Reference)      : 594
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 579
      |(Definition)     : 
      |(Reference)      : 594
     z
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 579  594
      |(Definition)     : 605
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        100  format        (Definition) 609  
                           (Reference)  608
       1000  format        (Definition) 603  
                           (Reference)  602

 External subroutine subprogram "dmswrit"
  (inc)(line-no.)(nest)(optimize)
             622                           subroutine dmswrit(nx,my,lrec,lenc,kflag,ifile,z,istat)
             623                     !
             624                     !  subroutine to read data in pressure level fields
             625                     !
             626                     ! **** input ****
             627                     !
             628                     !  lrec: field identifaction label
             629                     !  lenc: no. of data values in a 2-d lrec field
             630                     !  ifile: path/file name containing initial fields
             631                     !
             632                     ! **** output ****
             633                     !
             634                     !  z: array containing gaussian grid 2-d field
             635                     !  istat: status code. .ne. zero means bad read
             636                     !
             637                           dimension z(nx,my)
             638                           character lrec*26,ifile*48,kflag*1
             639                     !
             640                     ! working array
             641                     !
             642                     !      dimension y(lenc)
             643                           character key*34
             644                     !
             645                           write(key,1000)lrec,kflag,lenc
             646                      1000 format(a26,a1,i7.7)
             647                     !
             648                     !      do 1 i=1,lenc
             649                     !        y(i)=z(i,1)
             650                     ! 1    continue
             651                     !
             652                           call dmsput(ifile,key//char(0),z,istat)
             653                     !
             654     1                     if(istat.ne.0)then
             655     1                       print *,'dmsput key=',key,' error'
             656     1                       call dmsexit(-1)
             657     1                     else
             658     1                       print *,'dmsput key=',key,' ok'
             659     1                     endif
             660                     !
             661                           return
             662                           end

 Diagnostic messages: program name(dmswrit)
   jwd8204o-i  "gm2gm_sub.f90", line 652: This loop is software pipelined.

 Procedure information
   Lines      : 41
   Statements : 15
   Stack(byte): 528
   Prefetch num: 0

 Scoping unit of external sub-program : dmswrit
   Attribute and Cross reference of name
     char
      |(Class and Type) : intrinsic function name, CHARACTER((unknown),1)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 652
     dmsexit
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 656
     dmsput
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 652
     dmswrit
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 622
      |(Reference)      : 
     ifile
      |(Class and Type) : variable name, CHARACTER(48,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622  638
      |(Definition)     : 652
      |(Reference)      : 
     istat
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622
      |(Definition)     : 652
      |(Reference)      : 654
     key
      |(Class and Type) : variable name, CHARACTER(34,1)
      |(Attributes)     : 
      |(Declaration)    : 643
      |(Definition)     : 645
      |(Reference)      : 652  655  658
     kflag
      |(Class and Type) : variable name, CHARACTER(1,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622  638
      |(Definition)     : 
      |(Reference)      : 645
     lenc
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622
      |(Definition)     : 
      |(Reference)      : 645
     lrec
      |(Class and Type) : variable name, CHARACTER(26,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622  638
      |(Definition)     : 
      |(Reference)      : 645
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622
      |(Definition)     : 
      |(Reference)      : 637
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 622
      |(Definition)     : 
      |(Reference)      : 637
     z
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 622  637
      |(Definition)     : 652
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
       1000  format        (Definition) 646  
                           (Reference)  645

 External subroutine subprogram "syslbl"
  (inc)(line-no.)(nest)(optimize)
             663                     
             664                           subroutine syslbl (clrec,idtg,itau,ciflap,cirec)
             665                     !
             666                           character*4 ciflap
             667                           character*6 clrec
             668                           character*26 cirec
             669                           integer*8 idtg
             670                     !
             671                           write(cirec,1) clrec,itau,ciflap,idtg
             672                      1    format(a6,i4.4,a4,i12.12)
             673                           return
             674                           end

 Procedure information
   Lines      : 12
   Statements : 9
   Stack(byte): 208
   Prefetch num: 0

 Scoping unit of external sub-program : syslbl
   Attribute and Cross reference of name
     ciflap
      |(Class and Type) : variable name, CHARACTER(4,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 664  666
      |(Definition)     : 
      |(Reference)      : 671
     cirec
      |(Class and Type) : variable name, CHARACTER(26,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 664  668
      |(Definition)     : 671
      |(Reference)      : 
     clrec
      |(Class and Type) : variable name, CHARACTER(6,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 664  667
      |(Definition)     : 
      |(Reference)      : 671
     idtg
      |(Class and Type) : variable name, INTEGER(8)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 664  669
      |(Definition)     : 
      |(Reference)      : 671
     itau
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 664
      |(Definition)     : 
      |(Reference)      : 671
     syslbl
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 664
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          1  format        (Definition) 672  
                           (Reference)  671

 External subroutine subprogram "gausl3"
  (inc)(line-no.)(nest)(optimize)
             675                     
             676                           subroutine gausl3 (n,xa,xb,wt,ab)
             677                     !
             678                     ! weights and abscissas for nth order gaussian quadrature on (xa,xb).
             679                     ! input arguments
             680                     !
             681                     ! n  -the order desired
             682                     ! xa -the left endpoint of the interval of integration
             683                     ! xb -the right endpoint of the interval of integration
             684                     ! output arguments
             685                     ! ab -the n calculated abscissas
             686                     ! wt -the n calculated weights
             687                     !
             688                           implicit double precision (a-h,o-z)
             689                     !
             690                     !fj
             691                     !ccc  include '../include/rank.h'
             692                     !fj
             693                           real  ab(n) ,wt(n),xa,xb
             694                     !
             695                     ! machine dependent constants---
             696                     !  tol - convergence criterion for double precision iteration
             697                     !  pi  - given to 15 significant digits
             698                     !  c1  -  1/8                     these are coefficients in mcmahon"s
             699                     !  c2  -  -31/(2*3*8**2)          expansions of the kth zero of the
             700                     !  c3  -  3779/(2*3*5*8**3)       bessel function j0(x) (cf. abramowitz,
             701                     !  c4  -  -6277237/(3*5*7*8**5)   handbook of mathematical functions).
             702                     !  u   -  (1-(2/pi)**2)/4
             703                     !
             704                           data tol/1.d-14/,pi/3.14159265358979/,u/.148678816357662/
             705                           data c1,c2,c3,c4/.125,-.080729166666667,.246028645833333, &
             706                                          -1.82443876720609 /
             707                     !
             708                     ! maximum number of iterations before giving up on convergence
             709                     !
             710                           data maxit /5/
             711                     !
             712                     ! arithmetic statement function for converting integer to double
             713                     !
             714                           dbli(i) = dble(float(i))
             715                     !
             716                           ddif = .5d0*(dble(xb)-dble(xa))
             717                           dsum = .5d0*(dble(xb)+dble(xa))
             718                           if (n .gt. 1) go to 101
             719                           ab(1) = 0.
             720                           wt(1) = 2.*ddif
             721                           go to 107
             722                       101 continue
             723                           nnp1 = n*(n+1)
             724                           cond = 1./sqrt((.5+float(n))**2+u)
             725                           lim = n/2
             726                     !
             727     1                     do 105 k=1,lim
             728     1                        b = (float(k)-.25)*pi
             729     1                        bisq = 1./(b*b)
             730     1               !
             731     1               ! rootbf approximates the kth zero of the bessel function j0(x)
             732     1               !
             733     1                        rootbf = b*(1.+bisq*(c1+bisq*(c2+bisq*(c3+bisq*c4))))
             734     1               !
             735     1               !      initial guess for kth root of legendre poly p-sub-n(x)
             736     1               !
             737     1                        dzero = cos(rootbf*cond)
             738     2                        do 103 i=1,maxit
             739     2               !
             740     2                           dpm2 = 1.d0
             741     2                           dpm1 = dzero
             742     2               !
             743     2               !       recursion relation for legendre polynomials
             744     2               !
             745     3        s                  do 102 nn=2,n
             746     3        m                      dp = (dbli(2*nn-1)*dzero*dpm1-dbli(nn-1)*dpm2)/dbli(nn)
             747     3        s                      dpm2 = dpm1
             748     3        s                      dpm1 = dp
             749     3        v        102       continue
             750     2                           dtmp = 1.d0/(1.d0-dzero*dzero)
             751     2                           dppr = dbli(n)*(dpm2-dzero*dp)*dtmp
             752     2                           dp2pri = (2.d0*dzero*dppr-dbli(nnp1)*dp)*dtmp
             753     2                           drat = dp/dppr
             754     2               !
             755     2               !       cubically-convergent iterative improvement of root
             756     2               !
             757     2                           dzeri = dzero-drat*(1.d0+drat*dp2pri/(2.d0*dppr))
             758     2                           ddum= dabs(dzeri-dzero)
             759     2                        if (ddum .le. tol) go to 104
             760     2                           dzero = dzeri
             761     2                 103    continue
             762     1               !fj
             763     1               !ccc     if(myrank .eq. 0) print 504
             764     1               !fj
             765     1                 504    format(1x,' in gausl3, convergence failed')
             766     1                 104    continue
             767     1                        ddifx = ddif*dzero
             768     1                        ab(k) = dsum-ddifx
             769     1                        wt(k) = 2.d0*(1.d0-dzero*dzero)/(dbli(n)*dpm2)**2*ddif
             770     1                        i = n-k+1
             771     1                        ab(i) = dsum+ddifx
             772     1                        wt(i) = wt(k)
             773     1                 105 continue
             774                     !
             775                           if (mod(n,2) .eq. 0) go to 107
             776                           ab(lim+1) = dsum
             777                           nm1 = n-1
             778                           dprod = n
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             779     1        s            do 106 k=1,nm1,2
             780     1        m               dprod = dbli(nm1-k)*dprod/dbli(n-k)
             781     1        v        106 continue
             782                           wt(lim+1) = 2.d0/dprod**2*ddif
             783                       107 return
             784                           end

 Diagnostic messages: program name(gausl3)
   jwd8220o-i  "gm2gm_sub.f90", line 676: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8206o-i  "gm2gm_sub.f90", line 724: Division is changed to multiplication by reciprocal.
   jwd8220o-i  "gm2gm_sub.f90", line 728: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8209o-i  "gm2gm_sub.f90", line 737: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8663o-i  "gm2gm_sub.f90", line 745: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd6202s-i  "gm2gm_sub.f90", line 746: SIMD conversion cannot be applied to DO loop: data dependency of variable 'dpm1' may cause different results from serial execution for loop.
   jwd6202s-i  "gm2gm_sub.f90", line 746: SIMD conversion cannot be applied to DO loop: data dependency of variable 'dpm2' may cause different results from serial execution for loop.
   jwd8220o-i  "gm2gm_sub.f90", line 746: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8209o-i  "gm2gm_sub.f90", line 751: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 757: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 758: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 769: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 779: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 779: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 4.
   jwd6202s-i  "gm2gm_sub.f90", line 780: SIMD conversion cannot be applied to DO loop: data dependency of variable 'dprod' may cause different results from serial execution for loop.
   jwd8220o-i  "gm2gm_sub.f90", line 780: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8209o-i  "gm2gm_sub.f90", line 782: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 110
   Statements : 58
   Stack(byte): 16
   Prefetch num: 0

 Scoping unit of external sub-program : gausl3
   Attribute and Cross reference of name
     ab
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 676  693
      |(Definition)     : 719  768  771  776
      |(Reference)      : 
     b
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 728
      |(Reference)      : 729  729  733
     bisq
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 729
      |(Reference)      : 733  733  733  733
     c1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 705
      |(Definition)     : 
      |(Reference)      : 733
     c2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 705
      |(Definition)     : 
      |(Reference)      : 733
     c3
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 705
      |(Definition)     : 
      |(Reference)      : 733
     c4
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 705
      |(Definition)     : 
      |(Reference)      : 733
     cond
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 724
      |(Reference)      : 737
     cos
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 737
     dabs
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 758
     dble
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 714  716  716  717  717
     dbli
      |(Class and Type) : statement function name, REAL(8)-implicited
      |(Attributes)     : PURE
      |(Declaration)    : 714
      |(Definition)     : 
      |(Reference)      : 746  746  746  751  752  769  780  780
     ddif
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 716
      |(Reference)      : 720  767  769  782
     ddifx
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 767
      |(Reference)      : 768  771
     ddum
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 758
      |(Reference)      : 759
     dp
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 746
      |(Reference)      : 748  751  752  753
     dp2pri
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 752
      |(Reference)      : 757
     dpm1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 741  748
      |(Reference)      : 746  747
     dpm2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 740  747
      |(Reference)      : 746  751  769
     dppr
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 751
      |(Reference)      : 752  753  757
     dprod
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 778  780
      |(Reference)      : 780  782
     drat
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 753
      |(Reference)      : 757  757
     dsum
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 717
      |(Reference)      : 768  771  776
     dtmp
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 750
      |(Reference)      : 751  752
     dzeri
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 757
      |(Reference)      : 758  760
     dzero
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 737  760
      |(Reference)      : 741  746  750  750  751  752  757  758  767  769  769
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 714  724  728
     gausl3
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 676
      |(Reference)      : 
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 738  770
      |(Reference)      : 714  714  771  772
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 727  779
      |(Reference)      : 728  768  769  770  772  780  780
     lim
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 725
      |(Reference)      : 727  776  782
     maxit
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 710
      |(Definition)     : 
      |(Reference)      : 738
     mod
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 775
     n
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 676
      |(Definition)     : 
      |(Reference)      : 693  693  718  723  723  724  725  745  751  769  770  775  777  778  780
     nm1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 777
      |(Reference)      : 779  780
     nn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 745
      |(Reference)      : 746  746  746
     nnp1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 723
      |(Reference)      : 752
     pi
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 704
      |(Definition)     : 
      |(Reference)      : 728
     rootbf
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 733
      |(Reference)      : 737
     sqrt
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 724
     tol
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 704
      |(Definition)     : 
      |(Reference)      : 759
     u
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 704
      |(Definition)     : 
      |(Reference)      : 724
     wt
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 676  693
      |(Definition)     : 720  769  772  782
      |(Reference)      : 772
     xa
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 676  693
      |(Definition)     : 
      |(Reference)      : 716  717
     xb
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 676  693
      |(Definition)     : 
      |(Reference)      : 716  717
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        101  execution     (Definition) 722  
                           (Reference)  718
        102  execution     (Definition) 749  
                           (Reference)  745
        103  execution     (Definition) 761  
                           (Reference)  738
        104  execution     (Definition) 766  
                           (Reference)  759
        105  execution     (Definition) 773  
                           (Reference)  727
        106  execution     (Definition) 781  
                           (Reference)  779
        107  execution     (Definition) 783  
                           (Reference)  721  775
        504  format        (Definition) 765

 External subroutine subprogram "vterpj"
  (inc)(line-no.)(nest)(optimize)
             785                           subroutine vterpj (nx,lmaxp,lev,yr,f,yout,dout,tensy)
             786                     !
             787                     !          a bicubic spline interpolator to interpolate from a grid
             788                     !          with constant i (first dimension) grid spacing and variable
             789                     !          j (second dimension) grid spacing t0 a grid with
             790                     !          variable grid spacing. all grids are assumed to have point
             791                     !          (i,1) in the lower left corner with i increasing to the right
             792                     !          and j increasing upward.
             793                     !
             794                     ! **** input ****
             795                     !
             796                     !  nx: no. of points in e-w direction of input arrays
             797                     !  lmaxp: no. of levels in input arrays
             798                     !  lev: no. of levels in output arrays
             799                     !  yr: independent interpolation variable for input grid
             800                     !  f: dependent variable for input grid
             801                     !  yout: independent interpolation variable for output grid
             802                     !  tensy: cubic spline tension factor.
             803                     !
             804                     ! **** output ****
             805                     !
             806                     !  dout: dependent variable on output grid
             807                     !
             808                           dimension f(nx,lmaxp),dout(nx*lev),yr(nx,lmaxp) &
             809                                  , yout(nx*lev),tensy(lmaxp)
             810                     !
             811                           dimension fxx(nx,lmaxp),fyy(nx,lmaxp),pjy(nx*lev*4) &
             812                                  , tp1(nx*lev*4),ipt(nx*lev)
             813                     !
             814                     !          compute ipt and pjy
             815                     !
             816                           jym2  = lmaxp-2
             817                           nxjym2= nx*jym2
             818                           mn    = nx*lev
             819                     !
             820                           call setupv (yr,yout,mn,nx,lmaxp,pjy,ipt,tp1)
             821                     !
             822                     !          compute fyy
             823                     !
             824                           ll= nxjym2+nx
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             825     1       8v            do 110 i=1,ll
             826     1       8v            fxx(i,2)= yr(i,2)-yr(i,1)
             827     1       8v        110 continue
             828                     !
             829                     !CWB2015
             830                     !ocl serial
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             831     1       4v            do 210 i=1,nxjym2
             832     1       4v            fyy(i,2)= (fxx(i,3)*(f(i,1)-f(i,2))+fxx(i,2)*(f(i,3) &
             833     1                              -f(i,2)))/(fxx(i,3)*fxx(i,3)*fxx(i,2))
             834     1       4v            fxx(i,2)= fxx(i,2)/fxx(i,3)
             835     1       4v        210 continue
             836                     !
             837                           call trdivv (nx,jym2,fxx(1,2),fyy(1,2))
             838                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             839     1       8v            do 100 i=1,nx
             840     1       8v            fyy(i,1)= 0.0
             841     1       8v            fyy(i,lmaxp)= 0.0
             842     1       8v        100 continue
             843                     !
             844                     !  apply tension
             845                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      tensy: 2
                                   <<< Loop-information  End >>>
             846     1                     do 5 k=1,lmaxp
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             847     2       8v            do 5 i=1,nx
             848     2       8v            fyy(i,k)= fyy(i,k)*tensy(k)
             849     1       8v          5 continue
             850                     !
             851                           call gathv (mn,nx,lmaxp,ipt,fyy,f,tp1)
             852                     !
             853                           i1= mn
             854                           i2= mn*2
             855                           i3= mn*3
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             856     1       4v            do 130 i=1,mn
             857     1       4v            dout(i)= tp1(i)*pjy(i)+tp1(i+i1)*pjy(i+i1)+tp1(i+i2)*pjy(i+i2) &
             858     1                           + tp1(i+i3)*pjy(i+i3)
             859     1       4v        130 continue
             860                           return
             861                           end

 Diagnostic messages: program name(vterpj)
   jwd8220o-i  "gm2gm_sub.f90", line 785: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 825: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 825: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 825: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "gm2gm_sub.f90", line 831: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 831: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 831: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd6001s-i  "gm2gm_sub.f90", line 839: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8663o-i  "gm2gm_sub.f90", line 839: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 839: Loop unrolled 8 times.
   jwd6001s-i  "gm2gm_sub.f90", line 847: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 847: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 847: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd6001s-i  "gm2gm_sub.f90", line 856: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "gm2gm_sub.f90", line 856: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 856: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 856: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 80.
   jwd8209o-i  "gm2gm_sub.f90", line 857: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 77
   Statements : 33
   Stack(byte): 240
   Prefetch num: 2

 Scoping unit of external sub-program : vterpj
   Attribute and Cross reference of name
     dout
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 785  808
      |(Definition)     : 857
      |(Reference)      : 
     f
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 785  808
      |(Definition)     : 851
      |(Reference)      : 832  832  832  832
     fxx
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 811
      |(Definition)     : 826  834  837
      |(Reference)      : 832  832  832  832  832  834  834
     fyy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 811
      |(Definition)     : 832  837  840  841  848  851
      |(Reference)      : 848
     gathv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 851
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 825  831  839  847  856
      |(Reference)      : 826  826  826  832  832  832  832  832  832  832  832  832  832  834  834  834  840  841  848  848  857  857  857  857  857  857  857  857  857
     i1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 853
      |(Reference)      : 857  857
     i2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 854
      |(Reference)      : 857  857
     i3
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 855
      |(Reference)      : 857  857
     ipt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 811
      |(Definition)     : 820  851
      |(Reference)      : 
     jym2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 816  837
      |(Reference)      : 817
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 846
      |(Reference)      : 848  848  848
     lev
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 785
      |(Definition)     : 
      |(Reference)      : 808  808  811  811  811  818
     ll
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 824
      |(Reference)      : 825
     lmaxp
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 785
      |(Definition)     : 820  851
      |(Reference)      : 808  808  808  811  811  816  841  846
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 818  820  851
      |(Reference)      : 853  854  855  856
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 785
      |(Definition)     : 820  837  851
      |(Reference)      : 808  808  808  808  811  811  811  811  811  817  818  824  839  847
     nxjym2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 817
      |(Reference)      : 824  831
     pjy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 811
      |(Definition)     : 820
      |(Reference)      : 857  857  857  857
     setupv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 820
     tensy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 785  808
      |(Definition)     : 
      |(Reference)      : 848
     tp1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 811
      |(Definition)     : 820  851
      |(Reference)      : 857  857  857  857
     trdivv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 837
     vterpj
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 785
      |(Reference)      : 
     yout
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 785  808
      |(Definition)     : 820
      |(Reference)      : 
     yr
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 785  808
      |(Definition)     : 820
      |(Reference)      : 826  826
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          5  execution     (Definition) 849  
                           (Reference)  846  847
        100  execution     (Definition) 842  
                           (Reference)  839
        110  execution     (Definition) 827  
                           (Reference)  825
        130  execution     (Definition) 859  
                           (Reference)  856
        210  execution     (Definition) 835  
                           (Reference)  831

 External subroutine subprogram "prexp"
  (inc)(line-no.)(nest)(optimize)
             862                     
             863                           subroutine prexp ( nx,lev,ptop,sig,pt,pk,pk2,plt )
             864                           implicit none
             865                     !
             866                     !  subroutine to compute p to the kapa on odd and even levels
             867                     !
             868                     ! *** input ****
             869                     !
             870                     !  nx: e-w dimension no.
             871                     !  lev: number of vertical levels
             872                     !  sig: sigma levels
             873                     !  pt: terrain pressure
             874                     !
             875                     ! *** output ***
             876                     !
             877                     !  pk: odd (full) level p**capa
             878                     !  pk2: even( half) level p**capa
             879                     !
             880                     ! **************************************************
             881                     !
             882                     !
             883                           real ptop,capa,capap1,opok,ptopk
             884                           integer i,k,nx,lev,kbot,ktop
             885                           real pt(nx),pk2(nx,lev),pk(nx,lev),sig(lev+1),plt(nx,lev)
             886                     !
             887                     !sun  include '../include/paramt.h'  .. change im to nx
             888                           real pl2(nx,2)
             889                     !
             890                     !  compute  pressure variables
             891                     !
             892                           capa  = 1.0/3.5
             893                           capap1= 1.0+capa
             894                           opok  = 1.0/1000.0**capa
             895                     !
             896                           kbot= 1
             897                           k= 1
             898                           ptopk= ptop*opok*ptop**capa
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             899     1        v            do 80 i=1, nx
             900     1        v            pl2(i,kbot)= sig(2)*pt(i)+ptop
             901     1        v            pk2(i,1)   = opok*pl2(i,kbot)**capa
             902     1        v            pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-ptopk) &
             903     1                               / (capap1*(pl2(i,kbot)-ptop))
             904     1        v            plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
             905     1        v         80 continue
             906                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      sig: 2
                                   <<< Loop-information  End >>>
             907     1                     do 90 k = 2, lev
             908     1                     ktop= kbot
             909     1                     kbot= 3 - ktop
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             910     2        v            do 90 i = 1, nx
             911     2        v            pl2(i,kbot)= sig(k+1)*pt(i)+ptop
             912     2        v            pk2(i,k)   = opok*pl2(i,kbot)**capa
             913     2        v            pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-pl2(i,ktop)*pk2(i,k-1)) &
             914     2                               / (capap1*(pl2(i,kbot)-pl2(i,ktop)))
             915     2        v            plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
             916     1        v         90 continue
             917                     !
             918                           return
             919                           end

 Diagnostic messages: program name(prexp)
   jwd8220o-i  "gm2gm_sub.f90", line 863: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 899: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 899: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 899: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "gm2gm_sub.f90", line 904: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 910: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 910: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 910: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 60.
   jwd8209o-i  "gm2gm_sub.f90", line 915: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 58
   Statements : 29
   Stack(byte): 112
   Prefetch num: 2

 Scoping unit of external sub-program : prexp
   Attribute and Cross reference of name
     capa
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 883
      |(Definition)     : 892
      |(Reference)      : 893  894  898  901  912
     capap1
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 883
      |(Definition)     : 893
      |(Reference)      : 902  913
     i
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 884
      |(Definition)     : 899  910
      |(Reference)      : 900  900  901  901  902  902  902  902  904  904  904  904  904  911  911  912  912  913  913  913  913  913  913  913  915  915  915  915  915
     k
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 884
      |(Definition)     : 897  907
      |(Reference)      : 902  902  904  904  904  904  904  911  912  913  913  913  915  915  915  915  915
     kbot
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 884
      |(Definition)     : 896  909
      |(Reference)      : 900  901  902  902  908  911  912  913  913
     ktop
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 884
      |(Definition)     : 908
      |(Reference)      : 909  913  913
     lev
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 863  884
      |(Definition)     : 
      |(Reference)      : 885  885  885  885  907
     nx
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 863  884
      |(Definition)     : 
      |(Reference)      : 885  885  885  885  888  899  910
     opok
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 883
      |(Definition)     : 894
      |(Reference)      : 898  901  912
     pk
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 863  885
      |(Definition)     : 902  913
      |(Reference)      : 904  904  904  904  915  915  915  915
     pk2
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 863  885
      |(Definition)     : 901  912
      |(Reference)      : 902  913  913
     pl2
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 888
      |(Definition)     : 900  911
      |(Reference)      : 901  902  902  912  913  913  913  913
     plt
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 863  885
      |(Definition)     : 904  915
      |(Reference)      : 
     prexp
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 863
      |(Reference)      : 
     pt
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 863  885
      |(Definition)     : 
      |(Reference)      : 900  911
     ptop
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 863  883
      |(Definition)     : 
      |(Reference)      : 898  898  900  902  911
     ptopk
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 883
      |(Definition)     : 898
      |(Reference)      : 902
     sig
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 863  885
      |(Definition)     : 
      |(Reference)      : 900  911
     sqrt
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 904  915
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         80  execution     (Definition) 905  
                           (Reference)  899
         90  execution     (Definition) 916  
                           (Reference)  907  910

 External subroutine subprogram "setupv"
  (inc)(line-no.)(nest)(optimize)
             920                           subroutine setupv (yr,yin,mn,nx,lmaxp,pjy,ipt,tp1)
             921                     !
             922                     !  setup routine for bicubv parameters.  see bicubv prolog for
             923                     !  parameter descriptions
             924                     !
             925                           dimension yin(mn),yr(nx,lmaxp),pjy(mn,4),tp1(mn,4)
             926                           dimension ipt(mn)
             927                     !
             928                           n= mn/nx
             929                     !
             930                     !  check out of bounds to ensure interpolation
             931                     !
             932                           eps = 1.0e-5
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 24
                                   <<<      yin: 24
                                   <<< Loop-information  End >>>
             933     1       6             do 100 i = 1, mn
             934     1       6             ix = i - ((i-1)/nx)*nx
             935     1       6             if ( yin(i).le.yr(ix,1) )      yin(i) = yr(ix,1) + eps
             936     1       6             if ( yin(i).ge.yr(ix,lmaxp) )  yin(i) = yr(ix,lmaxp) - eps
             937     1       6         100 continue
             938                     !
             939     1                     do 10 i=1,nx
             940     1                     k=1
             941     2                     do 5 j=1,n
             942     2                     ii= nx*(j-1)
             943     2                   6 k= k+1
             944     2                     if(yin(i+ii).gt.yr(i,k)) go to 6
             945     2                     ipt(i+ii)= i+nx*(k-1)
             946     2                     tp1(i+ii,1)= yin(i+ii)-yr(i,k-1)
             947     2                     tp1(i+ii,2)= yr(i,k)-yr(i,k-1)
             948     2                     k= k-1
             949     2                   5 continue
             950     1                  10 continue
             951                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             952     1       4v            do 90 i=1,mn
             953     1       4v            pjy(i,3)= tp1(i,1)/tp1(i,2)
             954     1       4v            pjy(i,4)= 1.0-pjy(i,3)
             955     1       4v            pjy(i,1)= pjy(i,3)*pjy(i,3)-1.0
             956     1       4v            pjy(i,2)= pjy(i,4)*pjy(i,4)-1.0
             957     1       4v            pjy(i,1)= pjy(i,1)*tp1(i,1)*tp1(i,2)
             958     1       4v            tp1(i,1)= tp1(i,2)-tp1(i,1)
             959     1       4v            pjy(i,2)= pjy(i,2)*tp1(i,1)*tp1(i,2)
             960     1       4v         90 continue
             961                     !
             962                           return
             963                           end

 Diagnostic messages: program name(setupv)
   jwd8220o-i  "gm2gm_sub.f90", line 920: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8670o-i  "gm2gm_sub.f90", line 933: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 933: Loop unrolled 6 times.
   jwd6101s-i  "gm2gm_sub.f90", line 934: SIMD conversion cannot be applied to the DO loop: a restricted statement was found in the loop.
   jwd6132s-i  "gm2gm_sub.f90", line 943: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6001s-i  "gm2gm_sub.f90", line 952: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 952: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 952: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.
   jwd8209o-i  "gm2gm_sub.f90", line 957: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 959: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 44
   Statements : 33
   Stack(byte): 0
   Prefetch num: 24

 Scoping unit of external sub-program : setupv
   Attribute and Cross reference of name
     eps
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 932
      |(Reference)      : 935  936
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 933  939  952
      |(Reference)      : 934  934  935  935  936  936  944  944  945  945  946  946  946  947  947  947  953  953  953  954  954  955  955  955  956  956  956  957  957  957  957  958  958  958  959  959  959  959
     ii
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 942
      |(Reference)      : 944  945  946  946  947
     ipt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 920  926
      |(Definition)     : 945
      |(Reference)      : 
     ix
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 934
      |(Reference)      : 935  935  936  936
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 941
      |(Reference)      : 942
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 940  943  948
      |(Reference)      : 943  944  945  946  947  947  948
     lmaxp
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 920
      |(Definition)     : 
      |(Reference)      : 925  936  936
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 920
      |(Definition)     : 
      |(Reference)      : 925  925  925  926  928  933  952
     n
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 928
      |(Reference)      : 941
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 920
      |(Definition)     : 
      |(Reference)      : 925  928  934  934  939  942  945
     pjy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 920  925
      |(Definition)     : 953  954  955  956  957  959
      |(Reference)      : 954  955  955  956  956  957  959
     setupv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 920
      |(Reference)      : 
     tp1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 920  925
      |(Definition)     : 946  947  958
      |(Reference)      : 953  953  957  957  958  958  959  959
     yin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 920  925
      |(Definition)     : 935  936
      |(Reference)      : 935  936  944  946
     yr
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 920  925
      |(Definition)     : 
      |(Reference)      : 935  935  936  936  944  946  947  947
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          5  execution     (Definition) 949  
                           (Reference)  941
          6  execution     (Definition) 943  
                           (Reference)  944
         10  execution     (Definition) 950  
                           (Reference)  939
         90  execution     (Definition) 960  
                           (Reference)  952
        100  execution     (Definition) 937  
                           (Reference)  933

 External subroutine subprogram "trdivv"
  (inc)(line-no.)(nest)(optimize)
             964                     
             965                           subroutine trdivv (m,n,a,y)
             966                     !sun  subroutine trdivv (m,n,a,c,y)
             967                     !
             968                     !  tri-diagonal gaussian elimination subroutine call by bicubv
             969                     !
             970                           dimension  a(m,n), y(m,n)
             971                           dimension  c(m,n-1)
             972                     !
             973                           nm = n-1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             974     1       6v            do 201 i=1,m
             975     1       6v            c(i,1)= 0.5/(1.0+a(i,1))
             976     1       6v            y(i,1) = y(i,1)*c(i,1)
             977     1       6v        201 continue
             978                     !
             979                     ! gaussian elimination
             980                     !
             981     1                     do 101 j=2,nm
             982     1               !dir$ ivdep
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             983     2       4v            do 101 i=1,m
             984     2       4v            c(i,j)= 1.0/(2.0+a(i,j)*(2.0-c(i,j-1)))
             985     2       4v            y(i,j) = (y(i,j)-a(i,j)*y(i,j-1))*c(i,j)
             986     1       4v        101 continue
             987                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             988     1       6v            do 202 i=1,m
             989     1       6v            y(i,n)= (y(i,n)-a(i,n)*y(i,nm))/(2.0+a(i,n)*(2.0-c(i,nm)))
             990     1       6v        202 continue
             991                     !
             992                     ! backwards substitution
             993                     !
             994     1                     do 104 k=nm,1,-1
             995     1               !dir$ ivdep
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             996     2       8v            do 104 i=1,m
             997     2       8v            y(i,k)= y(i,k)-c(i,k)*y(i,k+1)
             998     1       8v        104 continue
             999                           return
            1000                           end

 Diagnostic messages: program name(trdivv)
   jwd6001s-i  "gm2gm_sub.f90", line 974: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 974: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 974: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd6001s-i  "gm2gm_sub.f90", line 983: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 983: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 983: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd6001s-i  "gm2gm_sub.f90", line 988: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 988: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 988: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 120.
   jwd6001s-i  "gm2gm_sub.f90", line 996: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 996: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 996: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.

 Procedure information
   Lines      : 37
   Statements : 22
   Stack(byte): 96
   Prefetch num: 0

 Scoping unit of external sub-program : trdivv
   Attribute and Cross reference of name
     a
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 965  970
      |(Definition)     : 
      |(Reference)      : 975  984  985  989  989
     c
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 971
      |(Definition)     : 975  984
      |(Reference)      : 976  984  985  989  997
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 974  983  988  996
      |(Reference)      : 975  975  976  976  976  984  984  984  985  985  985  985  985  989  989  989  989  989  989  997  997  997  997
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 981
      |(Reference)      : 984  984  984  985  985  985  985  985
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 994
      |(Reference)      : 997  997  997  997
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 965
      |(Definition)     : 
      |(Reference)      : 970  970  971  974  983  988  996
     n
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 965
      |(Definition)     : 
      |(Reference)      : 970  970  971  973  989  989  989  989
     nm
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 973
      |(Reference)      : 981  989  989  994
     trdivv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 965
      |(Reference)      : 
     y
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 965  970
      |(Definition)     : 976  985  989  997
      |(Reference)      : 976  985  985  989  989  997  997
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        101  execution     (Definition) 986  
                           (Reference)  981  983
        104  execution     (Definition) 998  
                           (Reference)  994  996
        201  execution     (Definition) 977  
                           (Reference)  974
        202  execution     (Definition) 990  
                           (Reference)  988

 External subroutine subprogram "gathv"
  (inc)(line-no.)(nest)(optimize)
            1001                     
            1002                           subroutine gathv (mn,nx,lev,ipt,fyy,f,tp1)
            1003                     !
            1004                     !  sorting routine to find coefficients for cubic splines for each
            1005                     !  interpolation grid element.  see bicubv for parameter descriptions
            1006                     !
            1007                           dimension fyy(nx*lev),f(nx*lev),tp1(mn,4)
            1008                           dimension ipt(mn)
            1009                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1010     1       4v            do 20 i=1,mn
            1011     1       4v            tp1(i,1)= fyy(ipt(i))
            1012     1       4v            tp1(i,3)= f  (ipt(i))
            1013     1       4v            inx= ipt(i)-nx
            1014     1       4v            tp1(i,2)= fyy(inx)
            1015     1       4v            tp1(i,4)= f  (inx)
            1016     1       4v         20 continue
            1017                     !
            1018                           return
            1019                           end

 Diagnostic messages: program name(gathv)
   jwd6001s-i  "gm2gm_sub.f90", line 1010: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 1010: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1010: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 80.

 Procedure information
   Lines      : 19
   Statements : 12
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : gathv
   Attribute and Cross reference of name
     f
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1002  1007
      |(Definition)     : 
      |(Reference)      : 1012  1015
     fyy
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1002  1007
      |(Definition)     : 
      |(Reference)      : 1011  1014
     gathv
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1002
      |(Reference)      : 
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1010
      |(Reference)      : 1011  1011  1012  1012  1013  1014  1015
     inx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1013
      |(Reference)      : 1014  1015
     ipt
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1002  1008
      |(Definition)     : 
      |(Reference)      : 1011  1012  1013
     lev
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1002
      |(Definition)     : 
      |(Reference)      : 1007  1007
     mn
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1002
      |(Definition)     : 
      |(Reference)      : 1007  1008  1010
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1002
      |(Definition)     : 
      |(Reference)      : 1007  1007  1013
     tp1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1002  1007
      |(Definition)     : 1011  1012  1014  1015
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         20  execution     (Definition) 1016  
                           (Reference)  1010

 External subroutine subprogram "phi2pt"
  (inc)(line-no.)(nest)(optimize)
            1020                           subroutine phi2pt(nx,my,lmax,zz,anlslp,t1000,puvphi,sgeo,pt)
            1021                     !
            1022                           dimension sgeo(nx,my),pt(nx,my),zz(nx,my,lmax)
            1023                           dimension fld1(nx,lmax+2,my),fld2(nx,lmax+2,my),t1000(nx,my) &
            1024                                  , anlslp(nx,my),presp(nx,lmax+2,my) &
            1025                                  , pdiff(nx,my),hld1(nx,my),hld2(nx,my) &
            1026                                  , tens(lmax+2)
            1027                           dimension phistd(lmax),puvphi(lmax)
            1028                     !
            1029                           data cp/1004.24/, grav/9.80616/
            1030                     !
            1031                           capa= 1.0/3.5
            1032                           rgas= capa*cp
            1033                     !
            1034                           lmaxp1= lmax + 1
            1035                           lmaxp2= lmax + 2
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
            1036     1       8v            do 20 k = 1, lmaxp2
            1037     1       8v            tens(k) = 1.0
            1038     1       8v        20  continue
            1039                           tens(lmaxp2) = 0.0
            1040                           tens(1) = 0.0
            1041                     !
            1042                           call geostd ( lmax,puvphi,phistd )
            1043                     !
            1044                     !  read geopotential height
            1045                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    SPLIT
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 2
                                   <<<      phistd: 2
                                   <<<    OTHER PREFETCH : 2
                                   <<< Loop-information  End >>>
            1046     1       4v            do 60 k=1,lmax
            1047     1       4v            pstdt= log(puvphi(k))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            1048     2                     do 50 j=1,my
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1049     3       8v            do 50 i=1,nx
            1050     3       8v            presp(i,k+1,j)= pstdt
            1051     3       8v            fld2(i,k+1,j)= -grav*zz(i,j,k)
            1052     3       8v            fld1(i,k+1,j)= -grav*phistd(k)-fld2(i,k+1,j)
            1053     2       8v        50  continue
            1054     1                 60  continue
            1055                     !
            1056                     !  initialization of terrain pressure
            1057                     !
            1058                     !  define bottom & top boundary condition for pt interpolation
            1059                     !
            1060                           l1= 1
            1061                           alaps= 6.5e-4
            1062                           eps = 0.001
            1063                           call ttstd ( 1, 1.0, tp00 )
            1064                           call ttstd ( 1, puvphi(1), tp01 )
            1065                     !
            1066     1                     do 130 j=1,my
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 24
                                   <<<      presp: 4, t1000: 8, pt: 8, hld1: 4
                                   <<< Loop-information  End >>>
            1067     2       2s            do 132 i=1,nx
            1068     2       2v            hld1(i,j)= anlslp(i,j)
            1069     2       2v            pt(i,j)  = 0.1
            1070     2               !
            1071     2               ! dealing with inconsistency between anlslp and 1000hPa height
            1072     2               ! 2009/12/10
            1073     3       2m            if( fld2(i,lmaxp1,j).gt.0 .and. anlslp(i,j).ge.1000.)then
            1074     3       2s              pxx = log(hld1(i,j))
            1075     3       2s              pt(i,j) = fld2(i,lmaxp1,j) &
            1076     3                              +rgas*t1000(i,j)*(pxx-presp(i,lmaxp1,j))
            1077     3       2v            endif
            1078     2               !
            1079     3       2m            if(sgeo(i,j).le.-1.0) then
            1080     3       2s              px= sgeo(i,j)/(rgas*(t1000(i,j)-alaps*0.5*sgeo(i,j)))
            1081     3       2s              hld1(i,j)= hld1(i,j)*(1.0-px)
            1082     3       2s              pt(i,j)  =-sgeo(i,j) + 0.1
            1083     3       2v            endif
            1084     2       2v        132 continue
            1085     1                     call geostd (nx,hld1(1,j),hld2(1,j))
            1086     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 44
                                   <<<      presp: 12, fld2: 16, fld1: 4, pt: 4
                                   <<<      hld2: 4, pdiff: 4
                                   <<< Loop-information  End >>>
            1087     2       2s            do 133 i=1,nx
            1088     2       2v            hld1(i,j) = log(hld1(i,j))
            1089     2               !cc   if ( hld1(i,j) .le. (presp(i,lmaxp1,j)+eps) )  then
            1090     3       2m            if ( hld1(i,j) .le. presp(i,lmaxp1,j) )  then
            1091     3       2s              presp(i,lmaxp2,j)= 2.0*presp(i,lmaxp1,j) - presp(i,lmax,j)
            1092     3       2s              fld2(i,lmaxp2,j) = 2.0*fld2(i,lmaxp1,j) - fld2(i,lmax,j)
            1093     3       2s              fld1(i,lmaxp2,j) = fld1(i,lmaxp1,j)
            1094     3       2s            else
            1095     3       2s              presp(i,lmaxp2,j)= hld1(i,j)
            1096     3       2s              fld2(i,lmaxp2,j) = pt(i,j)
            1097     3       2s              fld1(i,lmaxp2,j) =-fld2(i,lmaxp2,j)-grav*hld2(i,j)
            1098     3       2v            endif
            1099     2       2v            presp(i,1,j)= log(1.0)
            1100     2       2v            fld2(i,1,j) = fld2(i,2,j) - rgas*tp00*(presp(i,2,j)-presp(i,1,j))
            1101     2       2v            fld1(i,1,j) = fld1(i,2,j)
            1102     2               !
            1103     2       2v            pdiff(i,j)  = -sgeo(i,j)
            1104     2       2s            if ((sgeo(i,j).le.0.0).and.(sgeo(i,j).ge.(-1.0+eps))) &
            1105     2                      pdiff(i,j)= 0.0
            1106     2               !
            1107     2       2v        133 continue
            1108     1               !
            1109     1               !  interpolate to get terrain pressure
            1110     1               !  interpolation is of log p - cubic as function of geopotential
            1111     1               !  output is log p in array pt
            1112     1               !
            1113     1                     call vterpj( nx,lmaxp2,l1,fld2(1,1,j),presp(1,1,j),pdiff(1,j) &
            1114     1                               , pt(1,j),tens)
            1115     1               !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1116     2       4v            do 135 i=1,nx
            1117     2       4v            pt(i,j)= exp(pt(i,j))
            1118     2       4v        135 continue
            1119     1                 130 continue
            1120                     !
            1121                           return
            1122                           end

 Diagnostic messages: program name(phi2pt)
   jwd8220o-i  "gm2gm_sub.f90", line 1020: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 1036: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8663o-i  "gm2gm_sub.f90", line 1036: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "gm2gm_sub.f90", line 1036: Loop unrolled 8 times.
   jwd8211o-i  "gm2gm_sub.f90", line 1046: Loops interchanged at line 1048.
   jwd8212o-i  "gm2gm_sub.f90", line 1046: Loop distributed into multiple loops.
   jwd6001s-i  "gm2gm_sub.f90", line 1046: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8204o-i  "gm2gm_sub.f90", line 1046: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1046: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8211o-i  "gm2gm_sub.f90", line 1048: Loops interchanged at line 1046.
   jwd6001s-i  "gm2gm_sub.f90", line 1049: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "gm2gm_sub.f90", line 1049: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "gm2gm_sub.f90", line 1049: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1049: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd8209o-i  "gm2gm_sub.f90", line 1051: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6229s-i  "gm2gm_sub.f90", line 1067: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "gm2gm_sub.f90", line 1067: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 1067: Loop unrolled 2 times.
   jwd8209o-i  "gm2gm_sub.f90", line 1081: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 1082: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6229s-i  "gm2gm_sub.f90", line 1087: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "gm2gm_sub.f90", line 1087: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "gm2gm_sub.f90", line 1087: Loop unrolled 2 times.
   jwd8209o-i  "gm2gm_sub.f90", line 1097: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "gm2gm_sub.f90", line 1100: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "gm2gm_sub.f90", line 1116: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 1116: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1116: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.

 Procedure information
   Lines      : 103
   Statements : 68
   Stack(byte): 448
   Prefetch num: 72

 Scoping unit of external sub-program : phi2pt
   Attribute and Cross reference of name
     alaps
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1061
      |(Reference)      : 1080
     anlslp
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1023
      |(Definition)     : 
      |(Reference)      : 1068  1073
     capa
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1031
      |(Reference)      : 1032
     cp
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 1029
      |(Definition)     : 
      |(Reference)      : 1032
     eps
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1062
      |(Reference)      : 1104
     exp
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1117
     fld1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1052  1093  1097  1101
      |(Reference)      : 1093  1101
     fld2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1051  1092  1096  1100  1113
      |(Reference)      : 1052  1073  1075  1092  1092  1097  1100
     geostd
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1042  1085
     grav
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 1029
      |(Definition)     : 
      |(Reference)      : 1051  1052  1097
     hld1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1068  1081  1085  1088
      |(Reference)      : 1074  1081  1088  1090  1095
     hld2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1085
      |(Reference)      : 1097
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1049  1067  1087  1116
      |(Reference)      : 1050  1051  1051  1052  1052  1068  1068  1069  1073  1073  1074  1075  1075  1075  1075  1079  1080  1080  1080  1081  1081  1082  1082  1088  1088  1090  1090  1091  1091  1091  1092  1092  1092  1093  1093  1095  1095  1096  1096  1097  1097  1097  1099  1100  1100  1100  1100  1101  1101  1103  1103  1104  1104  1104  1117  1117
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1048  1066
      |(Reference)      : 1050  1051  1051  1052  1052  1068  1068  1069  1073  1073  1074  1075  1075  1075  1075  1079  1080  1080  1080  1081  1081  1082  1082  1085  1085  1088  1088  1090  1090  1091  1091  1091  1092  1092  1092  1093  1093  1095  1095  1096  1096  1097  1097  1097  1099  1100  1100  1100  1100  1101  1101  1103  1103  1104  1104  1104  1113  1113  1113  1113  1117  1117
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1036  1046
      |(Reference)      : 1037  1047  1050  1051  1051  1052  1052  1052
     l1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1060  1113
      |(Reference)      : 
     lmax
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1020
      |(Definition)     : 1042
      |(Reference)      : 1022  1023  1023  1023  1023  1027  1027  1034  1035  1046  1091  1092
     lmaxp1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1034
      |(Reference)      : 1073  1075  1075  1090  1091  1092  1093
     lmaxp2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1035  1113
      |(Reference)      : 1036  1039  1091  1092  1093  1095  1096  1097  1097
     log
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1047  1074  1088  1099
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1020
      |(Definition)     : 
      |(Reference)      : 1022  1022  1022  1023  1023  1023  1023  1023  1023  1023  1023  1048  1066
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1020
      |(Definition)     : 1085  1113
      |(Reference)      : 1022  1022  1022  1023  1023  1023  1023  1023  1023  1023  1023  1049  1067  1087  1116
     pdiff
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1103  1104  1113
      |(Reference)      : 
     phi2pt
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1020
      |(Reference)      : 
     phistd
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1027
      |(Definition)     : 1042
      |(Reference)      : 1052
     presp
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1050  1091  1095  1099  1113
      |(Reference)      : 1075  1090  1091  1091  1100  1100
     pstdt
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1047
      |(Reference)      : 1050
     pt
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1022
      |(Definition)     : 1069  1075  1082  1113  1117
      |(Reference)      : 1096  1117
     puvphi
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1027
      |(Definition)     : 1042  1064
      |(Reference)      : 1047
     px
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1080
      |(Reference)      : 1081
     pxx
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1074
      |(Reference)      : 1075
     rgas
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1032
      |(Reference)      : 1075  1080  1100
     sgeo
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1022
      |(Definition)     : 
      |(Reference)      : 1079  1080  1080  1082  1103  1104  1104
     t1000
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1023
      |(Definition)     : 
      |(Reference)      : 1075  1080
     tens
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 1023
      |(Definition)     : 1037  1039  1040  1113
      |(Reference)      : 
     tp00
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1063
      |(Reference)      : 1100
     tp01
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1064
      |(Reference)      : 
     ttstd
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1063  1064
     vterpj
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1113
     zz
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1020  1022
      |(Definition)     : 
      |(Reference)      : 1051
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         20  execution     (Definition) 1038  
                           (Reference)  1036
         50  execution     (Definition) 1053  
                           (Reference)  1048  1049
         60  execution     (Definition) 1054  
                           (Reference)  1046
        130  execution     (Definition) 1119  
                           (Reference)  1066
        132  execution     (Definition) 1084  
                           (Reference)  1067
        133  execution     (Definition) 1107  
                           (Reference)  1087
        135  execution     (Definition) 1118  
                           (Reference)  1116

 External subroutine subprogram "geostd"
  (inc)(line-no.)(nest)(optimize)
            1123                           subroutine geostd (m,pin,phiin)
            1124                     !
            1125                     !  table lookup for standard atmosphere geopotentials as a function
            1126                     !  of pressure.  table has resolution of 10mbs below 100mb, 1mb
            1127                     !  from 100mbs to 1 mb.  interpolation is linear in log p.
            1128                     !
            1129                     !
            1130                     !  *********************************************************************
            1131                     !
            1132                     !
            1133                           dimension pin(m),phiin(m)
            1134                           dimension phi(230)
            1135                     !
            1136                     !     dimension phi(230),phi1(55),phi2(60),phi3(55),phi4(60)
            1137                     !     equivalence (phi(116),phi3)
            1138                     !     equivalence (phi(171),phi4)
            1139                     !
            1140                     !     equivalence (phi,phi1)
            1141                     !     equivalence (phi(56),phi2)
            1142                     !
            1143                     !     data  phi1/
            1144                           data (phi(i),i=1,55) / &
            1145                            31055. ,26481. ,23849. ,22000. ,20576. &
            1146                           ,19420. ,18442. ,17595. ,16848. ,16180. &
            1147                           ,15576. ,15024. ,14516. ,14046. ,13608. &
            1148                           ,13199. ,12815. ,12452. ,12110. ,11784. &
            1149                           ,11475. ,11180. ,10898. ,10626. ,10363. &
            1150                           ,10109. , 9862. , 9623. , 9390. , 9164. &
            1151                           , 8944. , 8730. , 8521. , 8317. , 8117. &
            1152                           , 7923. , 7733. , 7546. , 7364. , 7185. &
            1153                           , 7011. , 6839. , 6671. , 6506. , 6344. &
            1154                           , 6185. , 6028. , 5874. , 5723. , 5574. &
            1155                           , 5428. , 5284. , 5143. , 5003. , 4865./
            1156                     !     data  phi2/
            1157                           data (phi(i),i=56,115) / &
            1158                             4730. , 4596. , 4465. , 4335. , 4206. &
            1159                           , 4080. , 3955. , 3832. , 3711. , 3591. &
            1160                           , 3472. , 3355. , 3240. , 3125. , 3012. &
            1161                           , 2901. , 2790. , 2681. , 2573. , 2466. &
            1162                           , 2361. , 2256. , 2153. , 2050. , 1949. &
            1163                           , 1849. , 1750. , 1651. , 1554. , 1457. &
            1164                           , 1362. , 1267. , 1174. , 1081. ,  988. &
            1165                           ,  897. ,  807. ,  717. ,  629. ,  540. &
            1166                           ,  453. ,  367. ,  281. ,  195. ,  111. &
            1167                           ,   27. ,  -55. , -137. , -219. , -301. &
            1168                           , -381. , -461. , -540. , -619. , -698. &
            1169                           , -775. , -852. , -928. ,-1004. ,-1080./
            1170                     !     data  phi3/
            1171                           data (phi(i),i=116,170) / &
            1172                            47832. ,42451. ,39436. ,37360. ,35786. &
            1173                           ,34520. ,33462. ,32554. ,31760. ,31055. &
            1174                           ,30421. ,29843. ,29313. ,28824. ,28369. &
            1175                           ,27944. ,27546. ,27171. ,26817. ,26481. &
            1176                           ,26163. ,25860. ,25571. ,25294. ,25028. &
            1177                           ,24775. ,24530. ,24295. ,24068. ,23849. &
            1178                           ,23637. ,23433. ,23235. ,23043. ,22856. &
            1179                           ,22675. ,22500. ,22329. ,22162. ,22000. &
            1180                           ,21842. ,21688. ,21538. ,21391. ,21247. &
            1181                           ,21107. ,20970. ,20836. ,20705. ,20576. &
            1182                           ,20451. ,20327. ,20206. ,20088. ,19971./
            1183                     !     data  phi4/
            1184                           data (phi(i),i=171,230) / &
            1185                            19857. ,19745. ,19634. ,19526. ,19420. &
            1186                           ,19315. ,19211. ,19110. ,19010. ,18912. &
            1187                           ,18815. ,18720. ,18626. ,18533. ,18442. &
            1188                           ,18352. ,18263. ,18176. ,18090. ,18004. &
            1189                           ,17920. ,17837. ,17756. ,17675. ,17595. &
            1190                           ,17516. ,17439. ,17362. ,17286. ,17211. &
            1191                           ,17136. ,17063. ,16991. ,16919. ,16848. &
            1192                           ,16778. ,16709. ,16640. ,16572. ,16505. &
            1193                           ,16439. ,16373. ,16308. ,16244. ,16180. &
            1194                           ,16117. ,16054. ,15993. ,15931. ,15871. &
            1195                           ,15810. ,15751. ,15692. ,15634. ,15576. &
            1196                           ,15518. ,15461. ,15405. ,15349. ,15294./
            1197                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1198     1        v            do 3 i=1,m
            1199     1        v            phix= pin(i)*0.1
            1200     1        v            if(pin(i).lt.100.0) phix= max(1.000001,pin(i))
            1201     1               !
            1202     1        v            ii= int(phix)
            1203     1        v            pw2= phix/float(ii)
            1204     1        v            phix= 1.0+1.0/float(ii)
            1205     1        v            if(pin(i).lt.100.0) ii= ii+115
            1206     1               !
            1207     1               !      print*,'phi(ii)=',phi(ii)
            1208     1               !      print*,'phi(1+ii)=',phi(1+ii)
            1209     1               !      print*,'log(pw2)=',log(pw2)
            1210     1               !      print*,'log(phix)=',log(phix)
            1211     1               !      print*,'phi(ii),phi(1+ii),phi(ii),log(pw2),log(phix)=',ii,phi(ii)
            1212     1               !     +      ,phi(1+ii),phi(ii),log(pw2),log(phix)
            1213     1        v            phiin(i)= phi(ii)+(phi(1+ii)-phi(ii))*log(pw2)/log(phix)
            1214     1        v          3 continue
            1215                           return
            1216                           end

 Diagnostic messages: program name(geostd)
   jwd8220o-i  "gm2gm_sub.f90", line 1123: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 1198: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 1198: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1198: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 40.
   jwd8206o-i  "gm2gm_sub.f90", line 1203: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "gm2gm_sub.f90", line 1204: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "gm2gm_sub.f90", line 1204: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 94
   Statements : 18
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : geostd
   Attribute and Cross reference of name
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1203  1204
     geostd
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1123
      |(Reference)      : 
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1144  1157  1171  1184  1198
      |(Reference)      : 1144  1157  1171  1184  1199  1200  1200  1205  1213
     ii
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1202  1205
      |(Reference)      : 1203  1204  1205  1213  1213  1213
     int
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1202
     log
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1213  1213
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1123
      |(Definition)     : 
      |(Reference)      : 1133  1133  1198
     max
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1200
     phi
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, initialized
      |(Declaration)    : 1134  1144  1157  1171  1184
      |(Definition)     : 
      |(Reference)      : 1213  1213  1213
     phiin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1123  1133
      |(Definition)     : 1213
      |(Reference)      : 
     phix
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1199  1200  1204
      |(Reference)      : 1202  1203  1213
     pin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1123  1133
      |(Definition)     : 
      |(Reference)      : 1199  1200  1200  1205
     pw2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1203
      |(Reference)      : 1213
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          3  execution     (Definition) 1214  
                           (Reference)  1198

 External subroutine subprogram "ttstd"
  (inc)(line-no.)(nest)(optimize)
            1217                           subroutine ttstd (m,pin,ttin)
            1218                     !
            1219                     !  table lookup for standard atmosphere temperature as a function
            1220                     !  of pressure.  table has resolution of 10 mbs below 100mb, 1mb
            1221                     !  from 100 to 1 mb. interpolation is linear in log p.
            1222                     !
            1223                     !
            1224                     ! *****************************************************************
            1225                     !
            1226                           dimension pin(m),ttin(m)
            1227                           dimension tt(220),tt3(70),tt4(40)
            1228                           equivalence (tt(111),tt3)
            1229                           equivalence (tt(181),tt4)
            1230                           dimension tt1(70),tt2(40)
            1231                           equivalence (tt,tt1)
            1232                           equivalence (tt(71),tt2)
            1233                     !
            1234                           data tt1/ &
            1235                            227.7088 ,223.1353 ,220.5026 ,218.6536 ,217.2301 &
            1236                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1237                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1238                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1239                           ,216.6500 ,216.6500 ,217.3175 ,219.0844 ,220.7927 &
            1240                           ,222.4464 ,224.0495 ,225.6052 ,227.1165 ,228.5862 &
            1241                           ,230.0167 ,231.4104 ,232.7692 ,234.0951 ,235.3898 &
            1242                           ,236.6548 ,237.8917 ,239.1019 ,240.2865 ,241.4467 &
            1243                           ,242.5838 ,243.6985 ,244.7920 ,245.8651 ,246.9186 &
            1244                           ,247.9533 ,248.9700 ,249.9693 ,250.9519 ,251.9184 &
            1245                           ,252.8693 ,253.8053 ,254.7268 ,255.6343 ,256.5284 &
            1246                           ,257.4093 ,258.2776 ,259.1337 ,259.9779 ,260.8106 &
            1247                           ,261.6321 ,262.4428 ,263.2430 ,264.0329 ,264.8129 &
            1248                           ,265.5833 ,266.3442 ,267.0961 ,267.8390 ,268.5733/
            1249                           data tt2/ &
            1250                            269.2991 ,270.0166 ,270.7262 ,271.4279 ,272.1220 &
            1251                           ,272.8087 ,273.4880 ,274.1603 ,274.8256 ,275.4841 &
            1252                           ,276.1360 ,276.7814 ,277.4205 ,278.0533 ,278.6801 &
            1253                           ,279.3010 ,279.9160 ,280.5253 ,281.1291 ,281.7274 &
            1254                           ,282.3203 ,282.9080 ,283.4905 ,284.0679 ,284.6405 &
            1255                           ,285.2081 ,285.7710 ,286.3292 ,286.8828 ,287.4319 &
            1256                           ,287.9766 ,288.5170 ,289.0530 ,289.5849 ,290.1126 &
            1257                           ,290.6363 ,291.1560 ,291.6718 ,292.1837 ,292.6918/
            1258                           data tt3/ &
            1259                            272.0700 ,258.3600 ,249.7100 ,243.3700 ,238.6400 &
            1260                           ,235.7700 ,233.3300 ,231.2300 ,229.3700 ,227.7100 &
            1261                           ,227.0744 ,226.4968 ,225.9667 ,225.4771 ,225.0222 &
            1262                           ,224.5975 ,224.1993 ,223.8245 ,223.4705 ,223.1353 &
            1263                           ,222.8168 ,222.5136 ,222.2243 ,221.9476 ,221.6826 &
            1264                           ,221.4282 ,221.1837 ,220.9484 ,220.7216 ,220.5026 &
            1265                           ,220.2911 ,220.0865 ,219.8883 ,219.6963 ,219.5099 &
            1266                           ,219.3290 ,219.1532 ,218.9822 ,218.8157 ,218.6536 &
            1267                           ,218.4956 ,218.3416 ,218.1912 ,218.0444 ,217.9011 &
            1268                           ,217.7609 ,217.6239 ,217.4898 ,217.3586 ,217.2301 &
            1269                           ,217.1042 ,216.9808 ,216.8599 ,216.7413 ,216.6500 &
            1270                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1271                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1272                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500/
            1273                           data tt4/ &
            1274                            216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1275                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1276                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1277                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1278                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1279                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1280                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500 &
            1281                           ,216.6500 ,216.6500 ,216.6500 ,216.6500 ,216.6500/
            1282                     !
            1283                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1284     1        v            do 3 i=1,m
            1285     1        v            ttx= pin(i)*0.1
            1286     1        v            if(pin(i).lt.100.0) ttx= max(1.0000001,pin(i))
            1287     1               !
            1288     1        v            ii= int(ttx)
            1289     1        v            pw2= ttx/float(ii)
            1290     1        v            ttx= 1.0+1.0/float(ii)
            1291     1        v            if(pin(i).lt.100.0) ii= ii+110
            1292     1        v          3 ttin(i)= tt(ii)+(tt(ii+1)-tt(ii))*log(pw2)/log(ttx)
            1293                           return
            1294                           end

 Diagnostic messages: program name(ttstd)
   jwd8220o-i  "gm2gm_sub.f90", line 1217: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "gm2gm_sub.f90", line 1284: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 1284: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1284: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 40.
   jwd8206o-i  "gm2gm_sub.f90", line 1289: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "gm2gm_sub.f90", line 1290: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "gm2gm_sub.f90", line 1290: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 78
   Statements : 22
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : ttstd
   Attribute and Cross reference of name
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1289  1290
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1284
      |(Reference)      : 1285  1286  1286  1291  1292
     ii
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1288  1291
      |(Reference)      : 1289  1290  1291  1292  1292  1292
     int
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1288
     log
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1292  1292
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1217
      |(Definition)     : 
      |(Reference)      : 1226  1226  1284
     max
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1286
     pin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1217  1226
      |(Definition)     : 
      |(Reference)      : 1285  1286  1286  1291
     pw2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1289
      |(Reference)      : 1292
     tt
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, storage-associated, initialized
      |(Declaration)    : 1227  1228  1229  1231  1232
      |(Definition)     : 
      |(Reference)      : 1292  1292  1292
     tt1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, storage-associated, initialized
      |(Declaration)    : 1230  1231  1234
      |(Definition)     : 
      |(Reference)      : 
     tt2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, storage-associated, initialized
      |(Declaration)    : 1230  1232  1249
      |(Definition)     : 
      |(Reference)      : 
     tt3
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, storage-associated, initialized
      |(Declaration)    : 1227  1228  1258
      |(Definition)     : 
      |(Reference)      : 
     tt4
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, storage-associated, initialized
      |(Declaration)    : 1227  1229  1273
      |(Definition)     : 
      |(Reference)      : 
     ttin
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1217  1226
      |(Definition)     : 1292
      |(Reference)      : 
     ttstd
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1217
      |(Reference)      : 
     ttx
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1285  1286  1290
      |(Reference)      : 1288  1289  1292
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
          3  execution     (Definition) 1292  
                           (Reference)  1284

 External subroutine subprogram "qsatq"
  (inc)(line-no.)(nest)(optimize)
            1295                     	subroutine qsatq (imjm,tqs,pqs,qss)
            1296                     !
            1297                     !  vectorized saturation specific humidity subroutine
            1298                     !  algorithm is table-lookup.
            1299                     !
            1300                     !  formal parameters:
            1301                     !
            1302                     ! **** input ****
            1303                     !
            1304                     !  tqs:  input temperatures
            1305                     !  pqs:  input pressures
            1306                     !  imjm:  number of elements in input arrays
            1307                     !
            1308                     ! **** output ****
            1309                     !
            1310                     !  qss:  output saturation specific humidity
            1311                     !
            1312                           dimension tqs(imjm),pqs(imjm),qss(imjm)
            1313                           dimension vpsat(191)
            1314                     !
            1315                     !
            1316                     ! est1 are the saturated vapor pressure over ice for the temperatures
            1317                     !      -90.0 to -40.0 degrees c in one degree increments.
            1318                     ! est3 are the saturated vapor pressures over water for the temperatures
            1319                     !      0 to 100 degrees c in one degree increments.
            1320                     ! est2 are the saturated vapor pressures over water and ice for the
            1321                     !      temperatures -39 to -1 degeegs c linearly interpolated assuming
            1322                     !      total ice at -40.0 degrees and total water at 0 degrees.
            1323                     !
            1324                     ! the saturated values are obtained from the smithsonian meteorological
            1325                     ! tables, sixth revised edition (1971) page 350 using the goff-gratch
            1326                     ! formulation for saturated vapor pressure.
            1327                     !
            1328                           data vpsat/ &
            1329                              9.67165e-05,  1.15983e-04,  1.38819e-04,  1.65835e-04, &
            1330                              1.97736e-04,  2.35339e-04,  2.79584e-04,  3.31553e-04, &
            1331                              3.92489e-04,  4.63820e-04,  5.47177e-04,  6.44430e-04, &
            1332                              7.57710e-04,  8.89450e-04,  1.04242e-03,  1.21975e-03, &
            1333                              1.42503e-03,  1.66230e-03,  1.93614e-03,  2.25172e-03, &
            1334                              2.61488e-03,  3.03222e-03,  3.51113e-03,  4.05995e-03, &
            1335                              4.68804e-03,  5.40589e-03,  6.22523e-03,  7.15922e-03, &
            1336                              8.22253e-03,  9.43153e-03,  1.08045e-02,  1.23617e-02, &
            1337                              1.41258e-02,  1.61219e-02,  1.83779e-02,  2.09244e-02, &
            1338                              2.37959e-02,  2.70300e-02,  3.06684e-02,  3.47573e-02, &
            1339                              3.93475e-02,  4.44947e-02,  5.02607e-02,  5.67130e-02, &
            1340                              6.39258e-02,  7.19807e-02,  8.09670e-02,  9.09823e-02, &
            1341                              1.02134e-01,  1.14538e-01,  1.28323e-01,               &
            1342                     !
            1343                                            1.45280e-01,  1.64189e-01,  1.85241e-01, &
            1344                              2.08643e-01,  2.34615e-01,  2.63398e-01,  2.95248e-01, &
            1345                              3.30441e-01,  3.69270e-01,  4.12053e-01,  4.59124e-01, &
            1346                              5.10843e-01,  5.67591e-01,  6.29773e-01,  6.97819e-01, &
            1347                              7.72185e-01,  8.53352e-01,  9.41827e-01,  1.03814e+00, &
            1348                              1.14287e+00,  1.25659e+00,  1.37992e+00,  1.51352e+00, &
            1349                              1.65806e+00,  1.81424e+00,  1.98279e+00,  2.16447e+00, &
            1350                              2.36006e+00,  2.57039e+00,  2.79628e+00,  3.03858e+00, &
            1351                              3.29819e+00,  3.57599e+00,  3.87289e+00,  4.18982e+00, &
            1352                              4.52773e+00,  4.88753e+00,  5.27019e+00,  5.67664e+00, &
            1353                     !
            1354                              6.10780e+00,  6.56617e+00,  7.05475e+00,  7.57526e+00, &
            1355                              8.12946e+00,  8.71922e+00,  9.34647e+00,  1.00132e+01, &
            1356                              1.07216e+01,  1.14739e+01,  1.22723e+01,  1.31192e+01, &
            1357                              1.40172e+01,  1.49688e+01,  1.59767e+01,  1.70438e+01, &
            1358                              1.81729e+01,  1.93672e+01,  2.06298e+01,  2.19639e+01, &
            1359                              2.33729e+01,  2.48605e+01,  2.64302e+01,  2.80858e+01, &
            1360                              2.98314e+01,  3.16708e+01,  3.36085e+01,  3.56487e+01, &
            1361                              3.77959e+01,  4.00548e+01,  4.24303e+01,  4.49274e+01, &
            1362                              4.75511e+01,  5.03069e+01,  5.32001e+01,  5.62365e+01, &
            1363                              5.94220e+01,  6.27625e+01,  6.62643e+01,  6.99337e+01, &
            1364                     !
            1365                              7.37774e+01,  7.78022e+01,  8.20150e+01,  8.64231e+01, &
            1366                              9.10338e+01,  9.58548e+01,  1.00894e+02,  1.06159e+02, &
            1367                              1.11659e+02,  1.17401e+02,  1.23395e+02,  1.29650e+02, &
            1368                              1.36174e+02,  1.42978e+02,  1.50070e+02,  1.57461e+02, &
            1369                              1.65161e+02,  1.73180e+02,  1.81529e+02,  1.90218e+02, &
            1370                              1.99260e+02,  2.08665e+02,  2.18446e+02,  2.28613e+02, &
            1371                              2.39180e+02,  2.50159e+02,  2.61562e+02,  2.73404e+02, &
            1372                              2.85696e+02,  2.98453e+02,  3.11689e+02,  3.25418e+02, &
            1373                              3.39655e+02,  3.54414e+02,  3.69711e+02,  3.85560e+02, &
            1374                              4.01979e+02,  4.18982e+02,  4.36586e+02,  4.54808e+02, &
            1375                     !
            1376                              4.73665e+02,  4.93175e+02,  5.13354e+02,  5.34221e+02, &
            1377                              5.55795e+02,  5.78093e+02,  6.01135e+02,  6.24940e+02, &
            1378                              6.49527e+02,  6.74918e+02,  7.01131e+02,  7.28188e+02, &
            1379                              7.56110e+02,  7.84918e+02,  8.14633e+02,  8.45278e+02, &
            1380                              8.76876e+02,  9.09448e+02,  9.43018e+02,  9.77609e+02, &
            1381                              1.01325e+03/
            1382                     !
            1383                           tem = 1.0/1.622
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1384     1       2v            do 100 i=1,imjm
            1385     1       2v            t1 = max(1.00001, min(190.999, tqs(i)-182.16))
            1386     1       2v            ic = int(t1)
            1387     1       2v            qqq = min(tem*pqs(i), vpsat(ic)+(vpsat(1+ic)-vpsat(ic)) &
            1388     1                                                   *(t1-float(ic)))
            1389     1       2v            qss(i) = 0.622*qqq/(pqs(i)-qqq)
            1390     1       2v        100 continue
            1391                           return
            1392                           end

 Diagnostic messages: program name(qsatq)
   jwd6001s-i  "gm2gm_sub.f90", line 1384: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "gm2gm_sub.f90", line 1384: This loop is software pipelined.
   jwd8205o-i  "gm2gm_sub.f90", line 1384: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 72.

 Procedure information
   Lines      : 98
   Statements : 13
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : qsatq
   Attribute and Cross reference of name
     float
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1387
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1384
      |(Reference)      : 1385  1387  1389  1389
     ic
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1386
      |(Reference)      : 1387  1387  1387  1387
     imjm
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1295
      |(Definition)     : 
      |(Reference)      : 1312  1312  1312  1384
     int
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1386
     max
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1385
     min
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1385  1387
     pqs
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1295  1312
      |(Definition)     : 
      |(Reference)      : 1387  1389
     qqq
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1387
      |(Reference)      : 1389  1389
     qsatq
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1295
      |(Reference)      : 
     qss
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1295  1312
      |(Definition)     : 1389
      |(Reference)      : 
     t1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1385
      |(Reference)      : 1386  1387
     tem
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1383
      |(Reference)      : 1387
     tqs
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1295  1312
      |(Definition)     : 
      |(Reference)      : 1385
     vpsat
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, initialized
      |(Declaration)    : 1313  1328
      |(Definition)     : 
      |(Reference)      : 1387  1387  1387
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        100  execution     (Definition) 1390  
                           (Reference)  1384

 External subroutine subprogram "dmsreadi"
  (inc)(line-no.)(nest)(optimize)
            1393                     
            1394                           subroutine dmsreadi(nx,my,lrec,lenc,kflag,ifile,z,istat)
            1395                     !
            1396                     !  subroutine to read data in pressure level fields
            1397                     !
            1398                     ! **** input ****
            1399                     !
            1400                     !  lrec: field identifaction label
            1401                     !  lenc: no. of data values in a 2-d lrec field
            1402                     !  ifile: path/file name containing initial fields
            1403                     !
            1404                     ! **** output ****
            1405                     !
            1406                     !  z: array containing gaussian grid 2-d field
            1407                     !  istat: status code. .ne. zero means bad read
            1408                     !
            1409                           integer z(nx,my)
            1410                           character lrec*26,ifile*48,kflag*1
            1411                     !
            1412                           character key*34,crmk*88
            1413                     !
            1414                           write(key,1000)lrec,kflag,lenc
            1415                      1000 format(a26,a1,i7.7)
            1416                     !
            1417                           call dmsget(ifile,key//char(0),z,istat)
            1418                     !
            1419     1                     if(istat.ne.0) then
            1420     1               !
            1421     1                     write(crmk,100) key
            1422     1                 100 format('#######  record ',a34,' missing  ######')
            1423     1                     print*, crmk
            1424     1                     call dmsexit(-1)
            1425     1                     else
            1426     1                     print *,'dms key=',key,' found'
            1427     1                     endif
            1428                     !
            1429                           return
            1430                           end

 Diagnostic messages: program name(dmsreadi)
   jwd8204o-i  "gm2gm_sub.f90", line 1417: This loop is software pipelined.

 Procedure information
   Lines      : 38
   Statements : 17
   Stack(byte): 672
   Prefetch num: 0

 Scoping unit of external sub-program : dmsreadi
   Attribute and Cross reference of name
     char
      |(Class and Type) : intrinsic function name, CHARACTER((unknown),1)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1417
     crmk
      |(Class and Type) : variable name, CHARACTER(88,1)
      |(Attributes)     : 
      |(Declaration)    : 1412
      |(Definition)     : 1421
      |(Reference)      : 1423
     dmsexit
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1424
     dmsget
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1417
     dmsreadi
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1394
      |(Reference)      : 
     ifile
      |(Class and Type) : variable name, CHARACTER(48,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394  1410
      |(Definition)     : 1417
      |(Reference)      : 
     istat
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394
      |(Definition)     : 1417
      |(Reference)      : 1419
     key
      |(Class and Type) : variable name, CHARACTER(34,1)
      |(Attributes)     : 
      |(Declaration)    : 1412
      |(Definition)     : 1414
      |(Reference)      : 1417  1421  1426
     kflag
      |(Class and Type) : variable name, CHARACTER(1,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394  1410
      |(Definition)     : 
      |(Reference)      : 1414
     lenc
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394
      |(Definition)     : 
      |(Reference)      : 1414
     lrec
      |(Class and Type) : variable name, CHARACTER(26,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394  1410
      |(Definition)     : 
      |(Reference)      : 1414
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394
      |(Definition)     : 
      |(Reference)      : 1409
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1394
      |(Definition)     : 
      |(Reference)      : 1409
     z
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1394  1409
      |(Definition)     : 1417
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
        100  format        (Definition) 1422  
                           (Reference)  1421
       1000  format        (Definition) 1415  
                           (Reference)  1414

 External subroutine subprogram "dmswriti"
  (inc)(line-no.)(nest)(optimize)
            1431                     
            1432                           subroutine dmswriti(nx,my,lrec,lenc,kflag,ifile,z,istat)
            1433                     !
            1434                     !  subroutine to read data in pressure level fields
            1435                     !
            1436                     ! **** input ****
            1437                     !
            1438                     !  lrec: field identifaction label
            1439                     !  lenc: no. of data values in a 2-d lrec field
            1440                     !  ifile: path/file name containing initial fields
            1441                     !
            1442                     ! **** output ****
            1443                     !
            1444                     !  z: array containing gaussian grid 2-d field
            1445                     !  istat: status code. .ne. zero means bad read
            1446                     !
            1447                           integer z(nx,my)
            1448                           character lrec*26,ifile*48,kflag*1
            1449                     !
            1450                     ! working array
            1451                     !
            1452                     !      dimension y(lenc)
            1453                           character key*34
            1454                     !
            1455                           write(key,1000)lrec,kflag,lenc
            1456                      1000 format(a26,a1,i7.7)
            1457                     !
            1458                     !      do 1 i=1,lenc
            1459                     !        y(i)=z(i,1)
            1460                     ! 1    continue
            1461                     !
            1462                           call dmsput(ifile,key//char(0),z,istat)
            1463                     !
            1464     1                     if(istat.ne.0)then
            1465     1                       print *,'dmsput key=',key,' error'
            1466     1                       call dmsexit(-1)
            1467     1                     else
            1468     1                       print *,'dmsput key=',key,' ok'
            1469     1                     endif
            1470                     !
            1471                           return
            1472                           end

 Diagnostic messages: program name(dmswriti)
   jwd8204o-i  "gm2gm_sub.f90", line 1462: This loop is software pipelined.

 Procedure information
   Lines      : 42
   Statements : 15
   Stack(byte): 528
   Prefetch num: 0

 Scoping unit of external sub-program : dmswriti
   Attribute and Cross reference of name
     char
      |(Class and Type) : intrinsic function name, CHARACTER((unknown),1)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1462
     dmsexit
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1466
     dmsput
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1462
     dmswriti
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1432
      |(Reference)      : 
     ifile
      |(Class and Type) : variable name, CHARACTER(48,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432  1448
      |(Definition)     : 1462
      |(Reference)      : 
     istat
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432
      |(Definition)     : 1462
      |(Reference)      : 1464
     key
      |(Class and Type) : variable name, CHARACTER(34,1)
      |(Attributes)     : 
      |(Declaration)    : 1453
      |(Definition)     : 1455
      |(Reference)      : 1462  1465  1468
     kflag
      |(Class and Type) : variable name, CHARACTER(1,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432  1448
      |(Definition)     : 
      |(Reference)      : 1455
     lenc
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432
      |(Definition)     : 
      |(Reference)      : 1455
     lrec
      |(Class and Type) : variable name, CHARACTER(26,1)
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432  1448
      |(Definition)     : 
      |(Reference)      : 1455
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432
      |(Definition)     : 
      |(Reference)      : 1447
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1432
      |(Definition)     : 
      |(Reference)      : 1447
     z
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1432  1447
      |(Definition)     : 1462
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
       1000  format        (Definition) 1456  
                           (Reference)  1455

 Total information
   Procedures       : 22
   Total lines      : 1472
   Total statements : 743
   Total stack(byte): 125200
   Total prefetch num: 144

