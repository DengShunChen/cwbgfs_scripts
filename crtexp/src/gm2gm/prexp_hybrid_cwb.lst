
 Fujitsu Fortran Version 2.0.0  Mon Jul 24 10:21:58 2017

 Compilation information
   Current directory : /IFS4/data/datagfs/xb80/exp/GFS_Scripts_Maintain/crtexp/src/gm2gm
   Source file       : prexp_hybrid_cwb.f90

 Option information
   Command line options : -Kfast,openmp,optmsg=2 -CcdRR8 -X9 -Fwide -V -Ec -Qa,d,i,p,t,x -c -L/package/fx100/dms/dms.v4/lib -lrdms -lgdbm -L/package/fx100/operlib/lib -lnwp
   Effective options    : -fi -g0 -AE -Ec -Free -Fwide -O3 -Qa,d,i,p,t,x -X9
                          -CcdRR8 -x0
                          -KHPC_ACE2 -KFLTLD -Kadr44 -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofed
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc -Kintentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Knolto -Knonf -Kns -Kmfunc=1
                          -Knoocl -Komitfp -Koptmsg=2 -Knopreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_nostrong -Kprefetch_strong_L2
                          -Knoshortloop -Ksimd=auto -Ksimd_noseparate_stride
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Kthreadsafe -Knoparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration
                          -Knoreduction -Knoregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocoarray
                          -Nnocompdisp -Nnocopyarg -Nfreealloc -Nf90move
                          -Nnohook_func -Nnohook_time -Nline -Nlst -Nlst=a
                          -Nlst=d -Nlst=i -Nlst=p -Nlst=t -Nlst=x
                          -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "prexp_hybrid_cwb"
  (inc)(line-no.)(nest)(optimize)
               1                           subroutine prexp_hybrid_cwb (nxj,nx,lev,ptop,sigma,pt,pk,pk2,plt)
               2                     !
               3                     !  subroutine to compute p to the kapa on odd and even levels
               4                     !
               5                     ! *** input ****
               6                     !
               7                     !  nx: e-w dimension no.
               8                     !  lev: number of vertical levels
               9                     !  sig: sigma levels
              10                     !  pt: terrain pressure
              11                     !
              12                     ! *** output ***
              13                     !
              14                     !  pk: odd (full) level p**capa
              15                     !  pk2: even( half) level p**capa
              16                     !
              17                     ! **************************************************
              18                     !
              19                     !
              20                           dimension pt(nx),pk2(nx,lev),pk(nx,lev),sigma(lev+1,2),plt(nx,lev)
              21                     !
              22                     !sun  include '../include/paramt.h'  .. change im to nx
              23                           dimension pl2(nx,2)
              24                     !
              25                     !  compute  pressure variables
              26                     !
              27                           capa  = 1.0/3.5
              28                           capap1= 1.0+capa
              29                           opok  = 1.0/1000.0**capa
              30                     !
              31                     !ibm---beg
              32                     !     kbot= 1
              33                     !     k= 1
              34                     !     ptopk= ptop*opok*ptop**capa
              35                     !     do 80 i=1, nxj
              36                     !     pl2(i,kbot)= sig(2)*pt(i)+ptop
              37                     !     pk2(i,k)   = opok*pl2(i,kbot)**capa
              38                     !     pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-ptopk)
              39                     !    1           / (capap1*(pl2(i,kbot)-ptop))
              40                     !     plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
              41                     !  80 continue
              42                     !
              43                     !     do 90 k = 2, lev
              44                     !     ktop= kbot
              45                     !     kbot= 3 - ktop
              46                     !     do 90 i = 1, nxj
              47                     !     pl2(i,kbot)= sig(k+1)*pt(i)+ptop
              48                     !     pk2(i,k)   = opok*pl2(i,kbot)**capa
              49                     !     pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-pl2(i,ktop)*pk2(i,k-1))
              50                     !    1           / (capap1*(pl2(i,kbot)-pl2(i,ktop)))
              51                     !     plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
              52                     !  90 continue
              53                     !---
              54                           ptopk= ptop*opok*ptop**capa
              55                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      sigma: 4
                                   <<< Loop-information  End >>>
              56     1                     do k=1,lev
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              57     2       8v            do i=1,nxj
              58     2       8v            pk2(i,k)= sigma(k+1,1)*pt(i)+sigma(k+1,2)+ptop
              59     2               !      pk2(i,k)= sig(k+1)*pt(i)+ptop
              60     2       8v            enddo
              61     1                     call vlog(pk2(1,k),pk2(1,k),nxj)
              62     1                     enddo
              63                     !
              64     1                     do k=1,lev
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              65     2       8v            do i=1,nxj
              66     2       8v            pk2(i,k)=capa*pk2(i,k)
              67     2       8v            enddo
              68     1                     call vexp(pk2(1,k),pk2(1,k),nxj)
              69     1                     enddo
              70                     
              71                           kbot= 1
              72                           k= 1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              73     1       4v            do 80 i=1, nxj
              74     1       4v            pl2(i,kbot)= sigma(2,1)*pt(i)+sigma(2,2)+ptop
              75     1               !      pl2(i,kbot)= sig(2)*pt(i)+ptop
              76     1       4v            pk2(i,k)   = opok*pk2(i,k)
              77     1       4v            pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-ptopk)/ &
              78     1                                  (capap1*(pl2(i,kbot)-ptop))
              79     1       4v            plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
              80     1       4v         80 continue
              81                     !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      sigma: 4
                                   <<< Loop-information  End >>>
              82     1                     do 90 k = 2, lev
              83     1                     ktop= kbot
              84     1                     kbot= 3 - ktop
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              85     2       4v            do 90 i = 1, nxj
              86     2       4v            pl2(i,kbot)= sigma(k+1,1)*pt(i)+sigma(k+1,2)+ptop
              87     2               !      pl2(i,kbot)= sig(k+1)*pt(i)+ptop
              88     2       4v            pk2(i,k)   = opok*pk2(i,k)
              89     2       4v            pk(i,k)    = (pl2(i,kbot)*pk2(i,k)-pl2(i,ktop)*pk2(i,k-1)) &
              90     2                               / (capap1*(pl2(i,kbot)-pl2(i,ktop)))
              91     2       4v            plt(i,k)   = 1000.0*pk(i,k)*pk(i,k)*pk(i,k)*sqrt(pk(i,k))
              92     1       4v         90 continue
              93                     !ibm---end
              94                     !
              95                           return
              96                           end

 Diagnostic messages: program name(prexp_hybrid_cwb)
   jwd8220o-i  "prexp_hybrid_cwb.f90", line 1: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "prexp_hybrid_cwb.f90", line 57: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 57: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "prexp_hybrid_cwb.f90", line 57: This loop is software pipelined.
   jwd8205o-i  "prexp_hybrid_cwb.f90", line 57: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 58: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "prexp_hybrid_cwb.f90", line 65: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "prexp_hybrid_cwb.f90", line 65: This loop is software pipelined.
   jwd8205o-i  "prexp_hybrid_cwb.f90", line 65: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd6001s-i  "prexp_hybrid_cwb.f90", line 73: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "prexp_hybrid_cwb.f90", line 73: This loop is software pipelined.
   jwd8205o-i  "prexp_hybrid_cwb.f90", line 73: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 176.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 74: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 76: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 79: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "prexp_hybrid_cwb.f90", line 85: SIMD conversion is applied to DO loop with DO variable 'i'.
   jwd8204o-i  "prexp_hybrid_cwb.f90", line 85: This loop is software pipelined.
   jwd8205o-i  "prexp_hybrid_cwb.f90", line 85: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 112.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 86: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 88: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "prexp_hybrid_cwb.f90", line 91: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 96
   Statements : 38
   Stack(byte): 112
   Prefetch num: 8

 Scoping unit of external sub-program : prexp_hybrid_cwb
   Attribute and Cross reference of name
     capa
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 27
      |(Reference)      : 28  29  54  66
     capap1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 28
      |(Reference)      : 77  89
     i
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 57  65  73  85
      |(Reference)      : 58  58  66  66  74  74  76  76  77  77  77  77  79  79  79  79  79  86  86  88  88  89  89  89  89  89  89  89  91  91  91  91  91
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 56  64  72  82
      |(Reference)      : 58  58  58  61  61  66  66  68  68  76  76  77  77  79  79  79  79  79  86  86  88  88  89  89  89  91  91  91  91  91
     kbot
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 71  84
      |(Reference)      : 74  77  77  83  86  89  89
     ktop
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 83
      |(Reference)      : 84  89  89
     lev
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 20  20  20  20  56  64  82
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 20  20  20  20  23
     nxj
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 61  68
      |(Reference)      : 57  65  73  85
     opok
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 29
      |(Reference)      : 54  76  88
     pk
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  20
      |(Definition)     : 77  89
      |(Reference)      : 79  79  79  79  91  91  91  91
     pk2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  20
      |(Definition)     : 58  61  61  66  68  68  76  88
      |(Reference)      : 66  76  77  88  89  89
     pl2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 23
      |(Definition)     : 74  86
      |(Reference)      : 77  77  89  89  89  89
     plt
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  20
      |(Definition)     : 79  91
      |(Reference)      : 
     prexp_hybrid_cwb
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1
      |(Reference)      : 
     pt
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  20
      |(Definition)     : 
      |(Reference)      : 58  74  86
     ptop
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 54  54  58  74  77  86
     ptopk
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 54
      |(Reference)      : 77
     sigma
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  20
      |(Definition)     : 
      |(Reference)      : 58  58  74  74  86  86
     sqrt
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 79  91
     vexp
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 68
     vlog
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 61
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         80  execution     (Definition) 80  
                           (Reference)  73
         90  execution     (Definition) 92  
                           (Reference)  82  85

 Total information
   Procedures       : 1
   Total lines      : 96
   Total statements : 38
   Total stack(byte): 112
   Total prefetch num: 8

